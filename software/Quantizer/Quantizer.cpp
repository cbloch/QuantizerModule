/*
 * Quantizer library
 * Rich Holmes
 * 
 * Based on:
 * TELEXo Eurorack Module
 * (c) 2016, 2017 Brendon Cassidy
 * MIT License
 */
 
//#include "Arduino.h"
#include "Quantizer.h"
//#include "TxHelper.h"

//
// initializes the quantizer and sets the scale to 0 (usually equal temperament)
//
Quantizer::Quantizer() {
  SetScale(0);
}

//
// initializes the quantizer and sets the initial scale
//
Quantizer::Quantizer(int scale) {
  SetScale(scale);  
}

//
// initializes the quantizer and sets the initial scale
//
Quantizer::Quantizer(int bank, int scale)
{
  SetScale(bank, scale);
}

/*
 * change the scale of the quantizer
 */
void Quantizer::SetScale(int scale) {
  if (scale >= 0 && scale < scaleCount)
    {
      _scale = scale;
      _last.Note = 0;
      _last.Value = 0;
 
      _below = 1;
      _above = 0;
    }
}

/*
 * change the scale of the quantizer
 */
void Quantizer::SetScale(int bank, int scale) {
  if (bank < 6 && scale < 12)
    SetScale (pgm_read_word(&bankandscale[bank][scale]));
}

/*
 * quantizes an int (range 0-DACTOP)
 */
QuantizeResponse Quantizer::Quantize(int in) {

  QuantizeResponse response;
  
  // deal with negative values
  in = in < 0 ? -in : in;

  // short circuit if we are within our current boundary
  if (in >= _below && in < _above){
    return _last;
  }
  
  // if not - we need to find where we are in the list
  // hints are a type of skip-list that jumps us to the proper octave
  _octave = (int)(in / DACPEROCTAVE) - 1;
  _octave = _octave > 0 ? _octave : 0;
  
  _index = pgm_read_word (&(hints[_scale][_octave]));
  
  int distance = 32767;
  int distanceTemp = 0;

  // find where we can't get any closer then back out
  while (_index < notecount[_scale]) {
    _temp = in - pgm_read_float (&(scales[_scale][_index]));
    
    distanceTemp = _temp < 0 ? -_temp : _temp;
    
    if (distanceTemp > distance){
      _index--;
      break;
    } else {
      // else increment
      distance = distanceTemp;
      _index++;
    }
    
  }

  // move it down to the next to last if we made it to the end
  if (_index >= notecount[_scale]) 
    _index = notecount[_scale] - 1;

  // use index to quantize
  _current = pgm_read_float (&(scales[_scale][_index])) + 0.5; // rounding

  // set the response
  response.Note = _index;
  response.Value = _current;
  
  _last = response;
  
  // now set the helper boundries
  _above = _index < notecount[_scale] - 1 ? pgm_read_float (&(scales[_scale][_index + 1])) : 32767;
  _below = _index > 0 ? pgm_read_float (&(scales[_scale][_index-1])) : pgm_read_float (&(scales[_scale][_index]));

  // similar to a mutable quantize trick to expand the region slightly
  // had been doing this using floats - thx for the fixed math tip oliver
  _above = ((13 * _current) + (19 * _above)) >> 5;
  _below = ((13 * _current) + (19 * _below)) >> 5;

  // constrain the above and below values
  _above = _above > 32767 ? 32767 : _above;
  _below = _below < 0 ? 0 : _below;

  return response;
  
}

/*
 * returns the values (0-16383) for a note number; 0 if out of range
 */
float Quantizer::GetValueForNote(int note){
  if (note < notecount[_scale])
    return pgm_read_float(&(scales[_scale][note]));
  else
    return 0;
}

// INSERT AUTOGENERATED SCALE CLASS DATA HERE
#if SCALESET == 0
// 0 | +e 12  |  12-equal chromatic
const float Quantizer::scale0[] = { 0.0,34.125,68.25,102.375,136.5,170.625,204.75,238.875,273.0,307.125,341.25,375.375,409.5,443.625,477.75,511.875,546.0,580.125,614.25,648.375,682.5,716.625,750.75,784.875,819.0,853.125,887.25,921.375,955.5,989.625,1023.75,1057.875,1092.0,1126.125,1160.25,1194.375,1228.5,1262.625,1296.75,1330.875,1365.0,1399.125,1433.25,1467.375,1501.5,1535.625,1569.75,1603.875,1638.0,1672.125,1706.25,1740.375,1774.5,1808.625,1842.75,1876.875,1911.0,1945.125,1979.25,2013.375,2047.5 };
const int Quantizer::hints0[] = { 0,12,24,36,48,60 };
// 1 | +e 12 0 2 4 5 7 9 11  | major
const float Quantizer::scale1[] = { 0.0,68.25,136.5,170.625,238.875,307.125,375.375,409.5,477.75,546.0,580.125,648.375,716.625,784.875,819.0,887.25,955.5,989.625,1057.875,1126.125,1194.375,1228.5,1296.75,1365.0,1399.125,1467.375,1535.625,1603.875,1638.0,1706.25,1774.5,1808.625,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints1[] = { 0,7,14,21,28,35 };
// 2 | +e 12 0 2 3 5 7 8 10  | natural minor
const float Quantizer::scale2[] = { 0.0,68.25,102.375,170.625,238.875,273.0,341.25,409.5,477.75,511.875,580.125,648.375,682.5,750.75,819.0,887.25,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints2[] = { 0,7,14,21,28,35 };
// 3 | +e 12 0 2 3 5 7 8 11  | harmonic minor
const float Quantizer::scale3[] = { 0.0,68.25,102.375,170.625,238.875,273.0,375.375,409.5,477.75,511.875,580.125,648.375,682.5,784.875,819.0,887.25,921.375,989.625,1057.875,1092.0,1194.375,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1603.875,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,2013.375,2047.5 };
const int Quantizer::hints3[] = { 0,7,14,21,28,35 };
// 4 | +e 12 0 2 4 7 9   | major pentatonic
const float Quantizer::scale4[] = { 0.0,68.25,136.5,238.875,307.125,409.5,477.75,546.0,648.375,716.625,819.0,887.25,955.5,1057.875,1126.125,1228.5,1296.75,1365.0,1467.375,1535.625,1638.0,1706.25,1774.5,1876.875,1945.125,2047.5 };
const int Quantizer::hints4[] = { 0,5,10,15,20,25 };
// 5 | +e 12 0 3 5 7 10  | minor pentatonic
const float Quantizer::scale5[] = { 0.0,102.375,170.625,238.875,341.25,409.5,511.875,580.125,648.375,750.75,819.0,921.375,989.625,1057.875,1160.25,1228.5,1330.875,1399.125,1467.375,1569.75,1638.0,1740.375,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints5[] = { 0,5,10,15,20,25 };
// 6 | +e 12 0 3 5 6 7 10  | hexatonic blues
const float Quantizer::scale6[] = { 0.0,102.375,170.625,204.75,238.875,341.25,409.5,511.875,580.125,614.25,648.375,750.75,819.0,921.375,989.625,1023.75,1057.875,1160.25,1228.5,1330.875,1399.125,1433.25,1467.375,1569.75,1638.0,1740.375,1808.625,1842.75,1876.875,1979.25,2047.5 };
const int Quantizer::hints6[] = { 0,6,12,18,24,30 };
// 7 | +e 6  |  6-equal or whole tones
const float Quantizer::scale7[] = { 0.0,68.25,136.5,204.75,273.0,341.25,409.5,477.75,546.0,614.25,682.5,750.75,819.0,887.25,955.5,1023.75,1092.0,1160.25,1228.5,1296.75,1365.0,1433.25,1501.5,1569.75,1638.0,1706.25,1774.5,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints7[] = { 0,6,12,18,24,30 };
// 8 | +e 12 0 4 7  |  major triad
const float Quantizer::scale8[] = { 0.0,136.5,238.875,409.5,546.0,648.375,819.0,955.5,1057.875,1228.5,1365.0,1467.375,1638.0,1774.5,1876.875,2047.5 };
const int Quantizer::hints8[] = { 0,3,6,9,12,15 };
// 9 | +e 12 0 3 7  |  minor triad
const float Quantizer::scale9[] = { 0.0,102.375,238.875,409.5,511.875,648.375,819.0,921.375,1057.875,1228.5,1330.875,1467.375,1638.0,1740.375,1876.875,2047.5 };
const int Quantizer::hints9[] = { 0,3,6,9,12,15 };
// 10 | +e 12 0 4 7 10  |  dominant seventh
const float Quantizer::scale10[] = { 0.0,136.5,238.875,341.25,409.5,546.0,648.375,750.75,819.0,955.5,1057.875,1160.25,1228.5,1365.0,1467.375,1569.75,1638.0,1774.5,1876.875,1979.25,2047.5 };
const int Quantizer::hints10[] = { 0,4,8,12,16,20 };
// 11 | +e 12 0 3 5 9  |  diminished seventh
const float Quantizer::scale11[] = { 0.0,102.375,204.75,307.125,409.5,511.875,614.25,716.625,819.0,921.375,1023.75,1126.125,1228.5,1330.875,1433.25,1535.625,1638.0,1740.375,1842.75,1945.125,2047.5 };
const int Quantizer::hints11[] = { 0,4,8,12,16,20 };
// 12 | +e 12  1  3  5  6  8 10  0   | C# major / Bb natural minor
const float Quantizer::scale12[] = { 0.0,34.125,102.375,170.625,204.75,273.0,341.25,409.5,443.625,511.875,580.125,614.25,682.5,750.75,819.0,853.125,921.375,989.625,1023.75,1092.0,1160.25,1228.5,1262.625,1330.875,1399.125,1433.25,1501.5,1569.75,1638.0,1672.125,1740.375,1808.625,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints12[] = { 0,7,14,21,28,35 };
// 13 | +e 12  2  4  6  7  9 11  1   | D  major / B  natural minor
const float Quantizer::scale13[] = { -34.125,34.125,68.25,136.5,204.75,238.875,307.125,375.375,443.625,477.75,546.0,614.25,648.375,716.625,784.875,853.125,887.25,955.5,1023.75,1057.875,1126.125,1194.375,1262.625,1296.75,1365.0,1433.25,1467.375,1535.625,1603.875,1672.125,1706.25,1774.5,1842.75,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints13[] = { 0,8,15,22,29,36 };
// 14 | +e 12  3  5  7  8 10  0  2   | Eb major / C  natural minor
const float Quantizer::scale14[] = { 0.0,68.25,102.375,170.625,238.875,273.0,341.25,409.5,477.75,511.875,580.125,648.375,682.5,750.75,819.0,887.25,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints14[] = { 0,7,14,21,28,35 };
// 15 | +e 12  4  6  8  9 11  1  3   | E  major / C# natural minor
const float Quantizer::scale15[] = { -34.125,34.125,102.375,136.5,204.75,273.0,307.125,375.375,443.625,511.875,546.0,614.25,682.5,716.625,784.875,853.125,921.375,955.5,1023.75,1092.0,1126.125,1194.375,1262.625,1330.875,1365.0,1433.25,1501.5,1535.625,1603.875,1672.125,1740.375,1774.5,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints15[] = { 0,8,15,22,29,36 };
// 16 | +e 12  5  7  9 10  0  2  4   | F  major / D  natural minor
const float Quantizer::scale16[] = { 0.0,68.25,136.5,170.625,238.875,307.125,341.25,409.5,477.75,546.0,580.125,648.375,716.625,750.75,819.0,887.25,955.5,989.625,1057.875,1126.125,1160.25,1228.5,1296.75,1365.0,1399.125,1467.375,1535.625,1569.75,1638.0,1706.25,1774.5,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints16[] = { 0,7,14,21,28,35 };
// 17 | +e 12  6  8 10 11  1  3  5   | F# major / Eb natural minor
const float Quantizer::scale17[] = { -34.125,34.125,102.375,170.625,204.75,273.0,341.25,375.375,443.625,511.875,580.125,614.25,682.5,750.75,784.875,853.125,921.375,989.625,1023.75,1092.0,1160.25,1194.375,1262.625,1330.875,1399.125,1433.25,1501.5,1569.75,1603.875,1672.125,1740.375,1808.625,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints17[] = { 0,8,15,22,29,36 };
// 18 | +e 12  7  9 11  0  2  4  6   | G  major / E  natural minor
const float Quantizer::scale18[] = { 0.0,68.25,136.5,204.75,238.875,307.125,375.375,409.5,477.75,546.0,614.25,648.375,716.625,784.875,819.0,887.25,955.5,1023.75,1057.875,1126.125,1194.375,1228.5,1296.75,1365.0,1433.25,1467.375,1535.625,1603.875,1638.0,1706.25,1774.5,1842.75,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints18[] = { 0,7,14,21,28,35 };
// 19 | +e 12  8 10  0  1  3  5  7   | G# major / F  natural minor
const float Quantizer::scale19[] = { 0.0,34.125,102.375,170.625,238.875,273.0,341.25,409.5,443.625,511.875,580.125,648.375,682.5,750.75,819.0,853.125,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1262.625,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1672.125,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints19[] = { 0,7,14,21,28,35 };
// 20 | +e 12  9 11  1  2  4  6  8   | A  major / F# natural minor
const float Quantizer::scale20[] = { -34.125,34.125,68.25,136.5,204.75,273.0,307.125,375.375,443.625,477.75,546.0,614.25,682.5,716.625,784.875,853.125,887.25,955.5,1023.75,1092.0,1126.125,1194.375,1262.625,1296.75,1365.0,1433.25,1501.5,1535.625,1603.875,1672.125,1706.25,1774.5,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints20[] = { 0,8,15,22,29,36 };
// 21 | +e 12 10  0  2  3  5  7  9   | Bb major / G  natural minor
const float Quantizer::scale21[] = { 0.0,68.25,102.375,170.625,238.875,307.125,341.25,409.5,477.75,511.875,580.125,648.375,716.625,750.75,819.0,887.25,921.375,989.625,1057.875,1126.125,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1535.625,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints21[] = { 0,7,14,21,28,35 };
// 22 | +e 12 11  1  3  4  6  8 10   | B  major / G# natural minor
const float Quantizer::scale22[] = { -34.125,34.125,102.375,136.5,204.75,273.0,341.25,375.375,443.625,511.875,546.0,614.25,682.5,750.75,784.875,853.125,921.375,955.5,1023.75,1092.0,1160.25,1194.375,1262.625,1330.875,1365.0,1433.25,1501.5,1569.75,1603.875,1672.125,1740.375,1774.5,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints22[] = { 0,8,15,22,29,36 };
// 23 | +e 12  1  3  4  6  8  9  0   | C# harmonic minor
const float Quantizer::scale23[] = { 0.0,34.125,102.375,136.5,204.75,273.0,307.125,409.5,443.625,511.875,546.0,614.25,682.5,716.625,819.0,853.125,921.375,955.5,1023.75,1092.0,1126.125,1228.5,1262.625,1330.875,1365.0,1433.25,1501.5,1535.625,1638.0,1672.125,1740.375,1774.5,1842.75,1911.0,1945.125,2047.5 };
const int Quantizer::hints23[] = { 0,7,14,21,28,35 };
// 24 | +e 12  2  4  5  7  9 10  1   | D  harmonic minor
const float Quantizer::scale24[] = { -68.25,34.125,68.25,136.5,170.625,238.875,307.125,341.25,443.625,477.75,546.0,580.125,648.375,716.625,750.75,853.125,887.25,955.5,989.625,1057.875,1126.125,1160.25,1262.625,1296.75,1365.0,1399.125,1467.375,1535.625,1569.75,1672.125,1706.25,1774.5,1808.625,1876.875,1945.125,1979.25,2081.625 };
const int Quantizer::hints24[] = { 0,8,15,22,29,36 };
// 25 | +e 12  3  5  6  8 10 11  2   | Eb harmonic minor
const float Quantizer::scale25[] = { -34.125,68.25,102.375,170.625,204.75,273.0,341.25,375.375,477.75,511.875,580.125,614.25,682.5,750.75,784.875,887.25,921.375,989.625,1023.75,1092.0,1160.25,1194.375,1296.75,1330.875,1399.125,1433.25,1501.5,1569.75,1603.875,1706.25,1740.375,1808.625,1842.75,1911.0,1979.25,2013.375,2115.75 };
const int Quantizer::hints25[] = { 0,8,15,22,29,36 };
// 26 | +e 12  4  6  7  9 11  0  3   | E  harmonic minor
const float Quantizer::scale26[] = { 0.0,102.375,136.5,204.75,238.875,307.125,375.375,409.5,511.875,546.0,614.25,648.375,716.625,784.875,819.0,921.375,955.5,1023.75,1057.875,1126.125,1194.375,1228.5,1330.875,1365.0,1433.25,1467.375,1535.625,1603.875,1638.0,1740.375,1774.5,1842.75,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints26[] = { 0,7,14,21,28,35 };
// 27 | +e 12  5  7  8 10  0  1  4   | F  harmonic minor
const float Quantizer::scale27[] = { 0.0,34.125,136.5,170.625,238.875,273.0,341.25,409.5,443.625,546.0,580.125,648.375,682.5,750.75,819.0,853.125,955.5,989.625,1057.875,1092.0,1160.25,1228.5,1262.625,1365.0,1399.125,1467.375,1501.5,1569.75,1638.0,1672.125,1774.5,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints27[] = { 0,7,14,21,28,35 };
// 28 | +e 12  6  8  9 11  1  2  5   | F# harmonic minor
const float Quantizer::scale28[] = { -34.125,34.125,68.25,170.625,204.75,273.0,307.125,375.375,443.625,477.75,580.125,614.25,682.5,716.625,784.875,853.125,887.25,989.625,1023.75,1092.0,1126.125,1194.375,1262.625,1296.75,1399.125,1433.25,1501.5,1535.625,1603.875,1672.125,1706.25,1808.625,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints28[] = { 0,8,15,22,29,36 };
// 29 | +e 12  7  9 10  0  2  3  6   | G  harmonic minor
const float Quantizer::scale29[] = { 0.0,68.25,102.375,204.75,238.875,307.125,341.25,409.5,477.75,511.875,614.25,648.375,716.625,750.75,819.0,887.25,921.375,1023.75,1057.875,1126.125,1160.25,1228.5,1296.75,1330.875,1433.25,1467.375,1535.625,1569.75,1638.0,1706.25,1740.375,1842.75,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints29[] = { 0,7,14,21,28,35 };
// 30 | +e 12  8 10 11  1  3  4  7   | G# harmonic minor
const float Quantizer::scale30[] = { -34.125,34.125,102.375,136.5,238.875,273.0,341.25,375.375,443.625,511.875,546.0,648.375,682.5,750.75,784.875,853.125,921.375,955.5,1057.875,1092.0,1160.25,1194.375,1262.625,1330.875,1365.0,1467.375,1501.5,1569.75,1603.875,1672.125,1740.375,1774.5,1876.875,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints30[] = { 0,8,15,22,29,36 };
// 31 | +e 12  9 11  0  2  4  5  8   | A  harmonic minor
const float Quantizer::scale31[] = { 0.0,68.25,136.5,170.625,273.0,307.125,375.375,409.5,477.75,546.0,580.125,682.5,716.625,784.875,819.0,887.25,955.5,989.625,1092.0,1126.125,1194.375,1228.5,1296.75,1365.0,1399.125,1501.5,1535.625,1603.875,1638.0,1706.25,1774.5,1808.625,1911.0,1945.125,2013.375,2047.5 };
const int Quantizer::hints31[] = { 0,7,14,21,28,35 };
// 32 | +e 12 10  0  1  3  5  6  9   | Bb harmonic minor
const float Quantizer::scale32[] = { 0.0,34.125,102.375,170.625,204.75,307.125,341.25,409.5,443.625,511.875,580.125,614.25,716.625,750.75,819.0,853.125,921.375,989.625,1023.75,1126.125,1160.25,1228.5,1262.625,1330.875,1399.125,1433.25,1535.625,1569.75,1638.0,1672.125,1740.375,1808.625,1842.75,1945.125,1979.25,2047.5 };
const int Quantizer::hints32[] = { 0,7,14,21,28,35 };
// 33 | +e 12 11  1  2  4  6  7 10   | B  harmonic minor
const float Quantizer::scale33[] = { -34.125,34.125,68.25,136.5,204.75,238.875,341.25,375.375,443.625,477.75,546.0,614.25,648.375,750.75,784.875,853.125,887.25,955.5,1023.75,1057.875,1160.25,1194.375,1262.625,1296.75,1365.0,1433.25,1467.375,1569.75,1603.875,1672.125,1706.25,1774.5,1842.75,1876.875,1979.25,2013.375,2081.625 };
const int Quantizer::hints33[] = { 0,8,15,22,29,36 };
// 34 | +e 12  0  2  3  5  7  9 11   | C  melodic minor
const float Quantizer::scale34[] = { 0.0,68.25,102.375,170.625,238.875,307.125,375.375,409.5,477.75,511.875,580.125,648.375,716.625,784.875,819.0,887.25,921.375,989.625,1057.875,1126.125,1194.375,1228.5,1296.75,1330.875,1399.125,1467.375,1535.625,1603.875,1638.0,1706.25,1740.375,1808.625,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints34[] = { 0,7,14,21,28,35 };
// 35 | +e 12  1  3  4  6  8 10  0   | C# melodic minor
const float Quantizer::scale35[] = { 0.0,34.125,102.375,136.5,204.75,273.0,341.25,409.5,443.625,511.875,546.0,614.25,682.5,750.75,819.0,853.125,921.375,955.5,1023.75,1092.0,1160.25,1228.5,1262.625,1330.875,1365.0,1433.25,1501.5,1569.75,1638.0,1672.125,1740.375,1774.5,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints35[] = { 0,7,14,21,28,35 };
// 36 | +e 12  2  4  5  7  9 11  1   | D  melodic minor
const float Quantizer::scale36[] = { -34.125,34.125,68.25,136.5,170.625,238.875,307.125,375.375,443.625,477.75,546.0,580.125,648.375,716.625,784.875,853.125,887.25,955.5,989.625,1057.875,1126.125,1194.375,1262.625,1296.75,1365.0,1399.125,1467.375,1535.625,1603.875,1672.125,1706.25,1774.5,1808.625,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints36[] = { 0,8,15,22,29,36 };
// 37 | +e 12  3  5  6  8 10  0  2   | Eb melodic minor
const float Quantizer::scale37[] = { 0.0,68.25,102.375,170.625,204.75,273.0,341.25,409.5,477.75,511.875,580.125,614.25,682.5,750.75,819.0,887.25,921.375,989.625,1023.75,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1433.25,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints37[] = { 0,7,14,21,28,35 };
// 38 | +e 12  4  6  7  9 11  1  3   | E  melodic minor
const float Quantizer::scale38[] = { -34.125,34.125,102.375,136.5,204.75,238.875,307.125,375.375,443.625,511.875,546.0,614.25,648.375,716.625,784.875,853.125,921.375,955.5,1023.75,1057.875,1126.125,1194.375,1262.625,1330.875,1365.0,1433.25,1467.375,1535.625,1603.875,1672.125,1740.375,1774.5,1842.75,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints38[] = { 0,8,15,22,29,36 };
// 39 | +e 12  5  7  8 10  0  2  4   | F  melodic minor
const float Quantizer::scale39[] = { 0.0,68.25,136.5,170.625,238.875,273.0,341.25,409.5,477.75,546.0,580.125,648.375,682.5,750.75,819.0,887.25,955.5,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1365.0,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1774.5,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints39[] = { 0,7,14,21,28,35 };
// 40 | +e 12  6  8  9 11  1  3  5   | F# melodic minor
const float Quantizer::scale40[] = { -34.125,34.125,102.375,170.625,204.75,273.0,307.125,375.375,443.625,511.875,580.125,614.25,682.5,716.625,784.875,853.125,921.375,989.625,1023.75,1092.0,1126.125,1194.375,1262.625,1330.875,1399.125,1433.25,1501.5,1535.625,1603.875,1672.125,1740.375,1808.625,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints40[] = { 0,8,15,22,29,36 };
// 41 | +e 12  7  9 10  0  2  4  6   | G  melodic minor
const float Quantizer::scale41[] = { 0.0,68.25,136.5,204.75,238.875,307.125,341.25,409.5,477.75,546.0,614.25,648.375,716.625,750.75,819.0,887.25,955.5,1023.75,1057.875,1126.125,1160.25,1228.5,1296.75,1365.0,1433.25,1467.375,1535.625,1569.75,1638.0,1706.25,1774.5,1842.75,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints41[] = { 0,7,14,21,28,35 };
// 42 | +e 12  8 10 11  1  3  5  7   | G# melodic minor
const float Quantizer::scale42[] = { -34.125,34.125,102.375,170.625,238.875,273.0,341.25,375.375,443.625,511.875,580.125,648.375,682.5,750.75,784.875,853.125,921.375,989.625,1057.875,1092.0,1160.25,1194.375,1262.625,1330.875,1399.125,1467.375,1501.5,1569.75,1603.875,1672.125,1740.375,1808.625,1876.875,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints42[] = { 0,8,15,22,29,36 };
// 43 | +e 12  9 11  0  2  4  6  8   | A  melodic minor
const float Quantizer::scale43[] = { 0.0,68.25,136.5,204.75,273.0,307.125,375.375,409.5,477.75,546.0,614.25,682.5,716.625,784.875,819.0,887.25,955.5,1023.75,1092.0,1126.125,1194.375,1228.5,1296.75,1365.0,1433.25,1501.5,1535.625,1603.875,1638.0,1706.25,1774.5,1842.75,1911.0,1945.125,2013.375,2047.5 };
const int Quantizer::hints43[] = { 0,7,14,21,28,35 };
// 44 | +e 12 10  0  1  3  5  7  9   | Bb melodic minor
const float Quantizer::scale44[] = { 0.0,34.125,102.375,170.625,238.875,307.125,341.25,409.5,443.625,511.875,580.125,648.375,716.625,750.75,819.0,853.125,921.375,989.625,1057.875,1126.125,1160.25,1228.5,1262.625,1330.875,1399.125,1467.375,1535.625,1569.75,1638.0,1672.125,1740.375,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints44[] = { 0,7,14,21,28,35 };
// 45 | +e 12 11  1  2  4  6  8 10   | B  melodic minor
const float Quantizer::scale45[] = { -34.125,34.125,68.25,136.5,204.75,273.0,341.25,375.375,443.625,477.75,546.0,614.25,682.5,750.75,784.875,853.125,887.25,955.5,1023.75,1092.0,1160.25,1194.375,1262.625,1296.75,1365.0,1433.25,1501.5,1569.75,1603.875,1672.125,1706.25,1774.5,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints45[] = { 0,8,15,22,29,36 };
// 46 | +e 12  1  3  5  8 10   | C# major / Bb minor pentatonic
const float Quantizer::scale46[] = { -68.25,34.125,102.375,170.625,273.0,341.25,443.625,511.875,580.125,682.5,750.75,853.125,921.375,989.625,1092.0,1160.25,1262.625,1330.875,1399.125,1501.5,1569.75,1672.125,1740.375,1808.625,1911.0,1979.25,2081.625 };
const int Quantizer::hints46[] = { 0,6,11,16,21,26 };
// 47 | +e 12  2  4  6  9 11   | D  major / B  minor pentatonic
const float Quantizer::scale47[] = { -34.125,68.25,136.5,204.75,307.125,375.375,477.75,546.0,614.25,716.625,784.875,887.25,955.5,1023.75,1126.125,1194.375,1296.75,1365.0,1433.25,1535.625,1603.875,1706.25,1774.5,1842.75,1945.125,2013.375,2115.75 };
const int Quantizer::hints47[] = { 0,6,11,16,21,26 };
// 48 | +e 12  3  5  7 10  0   | Eb major / C  minor pentatonic
const float Quantizer::scale48[] = { 0.0,102.375,170.625,238.875,341.25,409.5,511.875,580.125,648.375,750.75,819.0,921.375,989.625,1057.875,1160.25,1228.5,1330.875,1399.125,1467.375,1569.75,1638.0,1740.375,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints48[] = { 0,5,10,15,20,25 };
// 49 | +e 12  4  6  8 11  1   | E  major / C# minor pentatonic
const float Quantizer::scale49[] = { -34.125,34.125,136.5,204.75,273.0,375.375,443.625,546.0,614.25,682.5,784.875,853.125,955.5,1023.75,1092.0,1194.375,1262.625,1365.0,1433.25,1501.5,1603.875,1672.125,1774.5,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints49[] = { 0,6,11,16,21,26 };
// 50 | +e 12  5  7  9  0  2   | F  major / D  minor pentatonic
const float Quantizer::scale50[] = { 0.0,68.25,170.625,238.875,307.125,409.5,477.75,580.125,648.375,716.625,819.0,887.25,989.625,1057.875,1126.125,1228.5,1296.75,1399.125,1467.375,1535.625,1638.0,1706.25,1808.625,1876.875,1945.125,2047.5 };
const int Quantizer::hints50[] = { 0,5,10,15,20,25 };
// 51 | +e 12  6  8 10  1  3   | F# major / Eb minor pentatonic
const float Quantizer::scale51[] = { -68.25,34.125,102.375,204.75,273.0,341.25,443.625,511.875,614.25,682.5,750.75,853.125,921.375,1023.75,1092.0,1160.25,1262.625,1330.875,1433.25,1501.5,1569.75,1672.125,1740.375,1842.75,1911.0,1979.25,2081.625 };
const int Quantizer::hints51[] = { 0,6,11,16,21,26 };
// 52 | +e 12  7  9 11  2  4   | G  major / E  minor pentatonic
const float Quantizer::scale52[] = { -34.125,68.25,136.5,238.875,307.125,375.375,477.75,546.0,648.375,716.625,784.875,887.25,955.5,1057.875,1126.125,1194.375,1296.75,1365.0,1467.375,1535.625,1603.875,1706.25,1774.5,1876.875,1945.125,2013.375,2115.75 };
const int Quantizer::hints52[] = { 0,6,11,16,21,26 };
// 53 | +e 12  8 10  0  3  5   | G# major / F  minor pentatonic
const float Quantizer::scale53[] = { 0.0,102.375,170.625,273.0,341.25,409.5,511.875,580.125,682.5,750.75,819.0,921.375,989.625,1092.0,1160.25,1228.5,1330.875,1399.125,1501.5,1569.75,1638.0,1740.375,1808.625,1911.0,1979.25,2047.5 };
const int Quantizer::hints53[] = { 0,5,10,15,20,25 };
// 54 | +e 12  9 11  1  4  6   | A  major / F# minor pentatonic
const float Quantizer::scale54[] = { -34.125,34.125,136.5,204.75,307.125,375.375,443.625,546.0,614.25,716.625,784.875,853.125,955.5,1023.75,1126.125,1194.375,1262.625,1365.0,1433.25,1535.625,1603.875,1672.125,1774.5,1842.75,1945.125,2013.375,2081.625 };
const int Quantizer::hints54[] = { 0,6,11,16,21,26 };
// 55 | +e 12 10  0  2  5  7   | Bb major / G  minor pentatonic
const float Quantizer::scale55[] = { 0.0,68.25,170.625,238.875,341.25,409.5,477.75,580.125,648.375,750.75,819.0,887.25,989.625,1057.875,1160.25,1228.5,1296.75,1399.125,1467.375,1569.75,1638.0,1706.25,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints55[] = { 0,5,10,15,20,25 };
// 56 | +e 12 11  1  3  6  8   | B  major / G# minor pentatonic
const float Quantizer::scale56[] = { -34.125,34.125,102.375,204.75,273.0,375.375,443.625,511.875,614.25,682.5,784.875,853.125,921.375,1023.75,1092.0,1194.375,1262.625,1330.875,1433.25,1501.5,1603.875,1672.125,1740.375,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints56[] = { 0,6,11,16,21,26 };
// 57 | +e 12  1  4  6  7  8 11   | C# blues
const float Quantizer::scale57[] = { -34.125,34.125,136.5,204.75,238.875,273.0,375.375,443.625,546.0,614.25,648.375,682.5,784.875,853.125,955.5,1023.75,1057.875,1092.0,1194.375,1262.625,1365.0,1433.25,1467.375,1501.5,1603.875,1672.125,1774.5,1842.75,1876.875,1911.0,2013.375,2081.625 };
const int Quantizer::hints57[] = { 0,7,13,19,25,31 };
// 58 | +e 12  2  5  7  8  9  0   | D  blues
const float Quantizer::scale58[] = { 0.0,68.25,170.625,238.875,273.0,307.125,409.5,477.75,580.125,648.375,682.5,716.625,819.0,887.25,989.625,1057.875,1092.0,1126.125,1228.5,1296.75,1399.125,1467.375,1501.5,1535.625,1638.0,1706.25,1808.625,1876.875,1911.0,1945.125,2047.5 };
const int Quantizer::hints58[] = { 0,6,12,18,24,30 };
// 59 | +e 12  3  6  8  9 10  1   | Eb blues
const float Quantizer::scale59[] = { -68.25,34.125,102.375,204.75,273.0,307.125,341.25,443.625,511.875,614.25,682.5,716.625,750.75,853.125,921.375,1023.75,1092.0,1126.125,1160.25,1262.625,1330.875,1433.25,1501.5,1535.625,1569.75,1672.125,1740.375,1842.75,1911.0,1945.125,1979.25,2081.625 };
const int Quantizer::hints59[] = { 0,7,13,19,25,31 };
// 60 | +e 12  4  7  9 10 11  2   | E  blues
const float Quantizer::scale60[] = { -34.125,68.25,136.5,238.875,307.125,341.25,375.375,477.75,546.0,648.375,716.625,750.75,784.875,887.25,955.5,1057.875,1126.125,1160.25,1194.375,1296.75,1365.0,1467.375,1535.625,1569.75,1603.875,1706.25,1774.5,1876.875,1945.125,1979.25,2013.375,2115.75 };
const int Quantizer::hints60[] = { 0,7,13,19,25,31 };
// 61 | +e 12  5  8 10 11  0  3   | F  blues
const float Quantizer::scale61[] = { 0.0,102.375,170.625,273.0,341.25,375.375,409.5,511.875,580.125,682.5,750.75,784.875,819.0,921.375,989.625,1092.0,1160.25,1194.375,1228.5,1330.875,1399.125,1501.5,1569.75,1603.875,1638.0,1740.375,1808.625,1911.0,1979.25,2013.375,2047.5 };
const int Quantizer::hints61[] = { 0,6,12,18,24,30 };
// 62 | +e 12  6  9 11  0  1  4   | F# blues
const float Quantizer::scale62[] = { 0.0,34.125,136.5,204.75,307.125,375.375,409.5,443.625,546.0,614.25,716.625,784.875,819.0,853.125,955.5,1023.75,1126.125,1194.375,1228.5,1262.625,1365.0,1433.25,1535.625,1603.875,1638.0,1672.125,1774.5,1842.75,1945.125,2013.375,2047.5 };
const int Quantizer::hints62[] = { 0,6,12,18,24,30 };
// 63 | +e 12  7 10  0  1  2  5   | G  blues
const float Quantizer::scale63[] = { 0.0,34.125,68.25,170.625,238.875,341.25,409.5,443.625,477.75,580.125,648.375,750.75,819.0,853.125,887.25,989.625,1057.875,1160.25,1228.5,1262.625,1296.75,1399.125,1467.375,1569.75,1638.0,1672.125,1706.25,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints63[] = { 0,6,12,18,24,30 };
// 64 | +e 12  8 11  1  2  3  6   | G# blues
const float Quantizer::scale64[] = { -34.125,34.125,68.25,102.375,204.75,273.0,375.375,443.625,477.75,511.875,614.25,682.5,784.875,853.125,887.25,921.375,1023.75,1092.0,1194.375,1262.625,1296.75,1330.875,1433.25,1501.5,1603.875,1672.125,1706.25,1740.375,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints64[] = { 0,7,13,19,25,31 };
// 65 | +e 12  9  0  2  3  4  7   | A  blues
const float Quantizer::scale65[] = { 0.0,68.25,102.375,136.5,238.875,307.125,409.5,477.75,511.875,546.0,648.375,716.625,819.0,887.25,921.375,955.5,1057.875,1126.125,1228.5,1296.75,1330.875,1365.0,1467.375,1535.625,1638.0,1706.25,1740.375,1774.5,1876.875,1945.125,2047.5 };
const int Quantizer::hints65[] = { 0,6,12,18,24,30 };
// 66 | +e 12 10  1  3  4  5  8   | Bb blues
const float Quantizer::scale66[] = { -68.25,34.125,102.375,136.5,170.625,273.0,341.25,443.625,511.875,546.0,580.125,682.5,750.75,853.125,921.375,955.5,989.625,1092.0,1160.25,1262.625,1330.875,1365.0,1399.125,1501.5,1569.75,1672.125,1740.375,1774.5,1808.625,1911.0,1979.25,2081.625 };
const int Quantizer::hints66[] = { 0,7,13,19,25,31 };
// 67 | +e 12 11  2  4  5  6  9   | B  blues
const float Quantizer::scale67[] = { -34.125,68.25,136.5,170.625,204.75,307.125,375.375,477.75,546.0,580.125,614.25,716.625,784.875,887.25,955.5,989.625,1023.75,1126.125,1194.375,1296.75,1365.0,1399.125,1433.25,1535.625,1603.875,1706.25,1774.5,1808.625,1842.75,1945.125,2013.375,2115.75 };
const int Quantizer::hints67[] = { 0,7,13,19,25,31 };

const int Quantizer::notecount[] = { 61,36,36,36,26,26,31,31,16,16,21,21,36,37,36,37,36,37,36,36,37,36,37,36,37,37,36,36,37,36,37,36,36,37,36,36,37,36,37,36,37,36,37,36,36,37,27,27,26,27,26,27,27,26,27,26,27,32,31,32,32,31,31,31,32,31,32,32 };

const float *Quantizer::scales[] = { scale0,scale1,scale2,scale3,scale4,scale5,scale6,scale7,scale8,scale9,scale10,scale11,scale12,scale13,scale14,scale15,scale16,scale17,scale18,scale19,scale20,scale21,scale22,scale23,scale24,scale25,scale26,scale27,scale28,scale29,scale30,scale31,scale32,scale33,scale34,scale35,scale36,scale37,scale38,scale39,scale40,scale41,scale42,scale43,scale44,scale45,scale46,scale47,scale48,scale49,scale50,scale51,scale52,scale53,scale54,scale55,scale56,scale57,scale58,scale59,scale60,scale61,scale62,scale63,scale64,scale65,scale66,scale67 };
const int *Quantizer::hints[] = { hints0,hints1,hints2,hints3,hints4,hints5,hints6,hints7,hints8,hints9,hints10,hints11,hints12,hints13,hints14,hints15,hints16,hints17,hints18,hints19,hints20,hints21,hints22,hints23,hints24,hints25,hints26,hints27,hints28,hints29,hints30,hints31,hints32,hints33,hints34,hints35,hints36,hints37,hints38,hints39,hints40,hints41,hints42,hints43,hints44,hints45,hints46,hints47,hints48,hints49,hints50,hints51,hints52,hints53,hints54,hints55,hints56,hints57,hints58,hints59,hints60,hints61,hints62,hints63,hints64,hints65,hints66,hints67 };


const int Quantizer::bankandscale[6][12] = {
  {   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11 }, //  1  Top Twelve
  {   1,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22 }, //  2  Diatonic
  {   3,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33 }, //  3  Harmonic minor
  {  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45 }, //  4  Melodic minor (ascending/jazz)
  {   4,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56 }, //  5  Pentatonic
  {   6,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67 }  //  6  Hexatonic blues
};
#else
// 0 | +e 12  |  12-equal chromatic
const float Quantizer::scale0[] = { 0.0,34.125,68.25,102.375,136.5,170.625,204.75,238.875,273.0,307.125,341.25,375.375,409.5,443.625,477.75,511.875,546.0,580.125,614.25,648.375,682.5,716.625,750.75,784.875,819.0,853.125,887.25,921.375,955.5,989.625,1023.75,1057.875,1092.0,1126.125,1160.25,1194.375,1228.5,1262.625,1296.75,1330.875,1365.0,1399.125,1433.25,1467.375,1501.5,1535.625,1569.75,1603.875,1638.0,1672.125,1706.25,1740.375,1774.5,1808.625,1842.75,1876.875,1911.0,1945.125,1979.25,2013.375,2047.5 };
const int Quantizer::hints0[] = { 0,12,24,36,48,60 };
// 1 | scl/ptolemy.scl | Ptolemy's Intense Diatonic Syntonon, also Zarlino's scale
const float Quantizer::scale1[] = { 0.0,69.5842880906,131.829554856,169.957855955,239.542144045,301.787410811,371.371698902,409.5,479.084288091,541.329554856,579.457855955,649.042144045,711.287410811,780.871698902,819.0,888.584288091,950.829554856,988.957855955,1058.54214405,1120.78741081,1190.3716989,1228.5,1298.08428809,1360.32955486,1398.45785595,1468.04214405,1530.28741081,1599.8716989,1638.0,1707.58428809,1769.82955486,1807.95785595,1877.54214405,1939.78741081,2009.3716989,2047.5 };
const int Quantizer::hints1[] = { 0,7,14,21,28,35 };
// 2 | scl/duodene.scl | Ellis's Duodene : genus [33355]
const float Quantizer::scale2[] = { 0.0,38.1283010983,69.5842880906,107.712589189,131.829554856,169.957855955,201.413842947,239.542144045,277.670445144,301.787410811,347.254733234,371.371698902,409.5,447.628301098,479.084288091,517.212589189,541.329554856,579.457855955,610.913842947,649.042144045,687.170445144,711.287410811,756.754733234,780.871698902,819.0,857.128301098,888.584288091,926.712589189,950.829554856,988.957855955,1020.41384295,1058.54214405,1096.67044514,1120.78741081,1166.25473323,1190.3716989,1228.5,1266.6283011,1298.08428809,1336.21258919,1360.32955486,1398.45785595,1429.91384295,1468.04214405,1506.17044514,1530.28741081,1575.75473323,1599.8716989,1638.0,1676.1283011,1707.58428809,1745.71258919,1769.82955486,1807.95785595,1839.41384295,1877.54214405,1915.67044514,1939.78741081,1985.25473323,2009.3716989,2047.5 };
const int Quantizer::hints2[] = { 0,12,24,36,48,60 };
// 3 | myscl/RSH-5limitdiamond.scl | 5-limit diamond
const float Quantizer::scale3[] = { 0.0,107.712589189,131.829554856,169.957855955,239.542144045,277.670445144,301.787410811,409.5,517.212589189,541.329554856,579.457855955,649.042144045,687.170445144,711.287410811,819.0,926.712589189,950.829554856,988.957855955,1058.54214405,1096.67044514,1120.78741081,1228.5,1336.21258919,1360.32955486,1398.45785595,1468.04214405,1506.17044514,1530.28741081,1638.0,1745.71258919,1769.82955486,1807.95785595,1877.54214405,1915.67044514,1939.78741081,2047.5 };
const int Quantizer::hints3[] = { 0,7,14,21,28,35 };
// 4 | myscl/RSH-7limitdiamond.scl | 7-limit diamond
const float Quantizer::scale4[] = { 0.0,78.8881594174,91.0696965373,107.712589189,131.829554856,169.957855955,198.782285726,210.717714274,239.542144045,277.670445144,301.787410811,318.430303463,330.611840583,409.5,488.388159417,500.569696537,517.212589189,541.329554856,579.457855955,608.282285726,620.217714274,649.042144045,687.170445144,711.287410811,727.930303463,740.111840583,819.0,897.888159417,910.069696537,926.712589189,950.829554856,988.957855955,1017.78228573,1029.71771427,1058.54214405,1096.67044514,1120.78741081,1137.43030346,1149.61184058,1228.5,1307.38815942,1319.56969654,1336.21258919,1360.32955486,1398.45785595,1427.28228573,1439.21771427,1468.04214405,1506.17044514,1530.28741081,1546.93030346,1559.11184058,1638.0,1716.88815942,1729.06969654,1745.71258919,1769.82955486,1807.95785595,1836.78228573,1848.71771427,1877.54214405,1915.67044514,1939.78741081,1956.43030346,1968.61184058,2047.5 };
const int Quantizer::hints4[] = { 0,13,26,39,52,65 };
// 5 | scl/partch_43.scl | Harry Partch's 43-tone pure scale
const float Quantizer::scale5[] = { 0.0,7.33902132488,18.1793918773,28.8244297715,38.1283010983,51.4048962133,56.3076929756,62.2452667657,69.5842880906,78.8881594174,91.0696965373,100.373567864,107.712589189,118.552959741,131.829554856,142.474592751,148.472447508,160.653984628,169.957855955,177.29687728,188.137247832,198.782285726,210.717714274,221.362752168,232.20312272,239.542144045,248.846015372,261.027552492,267.025407249,277.670445144,290.947040259,301.787410811,309.126432136,318.430303463,330.611840583,339.915711909,347.254733234,353.192307024,358.095103787,371.371698902,380.675570228,391.320608123,402.160978675,409.5,416.839021325,427.679391877,438.324429772,447.628301098,460.904896213,465.807692976,471.745266766,479.084288091,488.388159417,500.569696537,509.873567864,517.212589189,528.052959741,541.329554856,551.974592751,557.972447508,570.153984628,579.457855955,586.79687728,597.637247832,608.282285726,620.217714274,630.862752168,641.70312272,649.042144045,658.346015372,670.527552492,676.525407249,687.170445144,700.447040259,711.287410811,718.626432136,727.930303463,740.111840583,749.415711909,756.754733234,762.692307024,767.595103787,780.871698902,790.175570228,800.820608123,811.660978675,819.0,826.339021325,837.179391877,847.824429772,857.128301098,870.404896213,875.307692976,881.245266766,888.584288091,897.888159417,910.069696537,919.373567864,926.712589189,937.552959741,950.829554856,961.474592751,967.472447508,979.653984628,988.957855955,996.29687728,1007.13724783,1017.78228573,1029.71771427,1040.36275217,1051.20312272,1058.54214405,1067.84601537,1080.02755249,1086.02540725,1096.67044514,1109.94704026,1120.78741081,1128.12643214,1137.43030346,1149.61184058,1158.91571191,1166.25473323,1172.19230702,1177.09510379,1190.3716989,1199.67557023,1210.32060812,1221.16097868,1228.5,1235.83902132,1246.67939188,1257.32442977,1266.6283011,1279.90489621,1284.80769298,1290.74526677,1298.08428809,1307.38815942,1319.56969654,1328.87356786,1336.21258919,1347.05295974,1360.32955486,1370.97459275,1376.97244751,1389.15398463,1398.45785595,1405.79687728,1416.63724783,1427.28228573,1439.21771427,1449.86275217,1460.70312272,1468.04214405,1477.34601537,1489.52755249,1495.52540725,1506.17044514,1519.44704026,1530.28741081,1537.62643214,1546.93030346,1559.11184058,1568.41571191,1575.75473323,1581.69230702,1586.59510379,1599.8716989,1609.17557023,1619.82060812,1630.66097868,1638.0,1645.33902132,1656.17939188,1666.82442977,1676.1283011,1689.40489621,1694.30769298,1700.24526677,1707.58428809,1716.88815942,1729.06969654,1738.37356786,1745.71258919,1756.55295974,1769.82955486,1780.47459275,1786.47244751,1798.65398463,1807.95785595,1815.29687728,1826.13724783,1836.78228573,1848.71771427,1859.36275217,1870.20312272,1877.54214405,1886.84601537,1899.02755249,1905.02540725,1915.67044514,1928.94704026,1939.78741081,1947.12643214,1956.43030346,1968.61184058,1977.91571191,1985.25473323,1991.19230702,1996.09510379,2009.3716989,2018.67557023,2029.32060812,2040.16097868,2047.5 };
const int Quantizer::hints5[] = { 0,43,86,129,172,215 };
// 6 | +g 5 3/2  |  pythagorean pentatonic
const float Quantizer::scale6[] = { 0.0,69.5842880906,139.168576181,239.542144045,309.126432136,409.5,479.084288091,548.668576181,649.042144045,718.626432136,819.0,888.584288091,958.168576181,1058.54214405,1128.12643214,1228.5,1298.08428809,1367.66857618,1468.04214405,1537.62643214,1638.0,1707.58428809,1777.16857618,1877.54214405,1947.12643214,2047.5 };
const int Quantizer::hints6[] = { 0,5,10,15,20,25 };
// 7 | +g 7 3/2  |  pythagorean diatonic
const float Quantizer::scale7[] = { 0.0,69.5842880906,139.168576181,208.752864272,239.542144045,309.126432136,378.710720227,409.5,479.084288091,548.668576181,618.252864272,649.042144045,718.626432136,788.210720227,819.0,888.584288091,958.168576181,1027.75286427,1058.54214405,1128.12643214,1197.71072023,1228.5,1298.08428809,1367.66857618,1437.25286427,1468.04214405,1537.62643214,1607.21072023,1638.0,1707.58428809,1777.16857618,1846.75286427,1877.54214405,1947.12643214,2016.71072023,2047.5 };
const int Quantizer::hints7[] = { 0,7,14,21,28,35 };
// 8 | +g 12 3/2  |  pythagorean chromatic
const float Quantizer::scale8[] = { 0.0,38.7950083172,69.5842880906,108.379296408,139.168576181,177.963584498,208.752864272,239.542144045,278.337152363,309.126432136,347.921440453,378.710720227,409.5,448.295008317,479.084288091,517.879296408,548.668576181,587.463584498,618.252864272,649.042144045,687.837152363,718.626432136,757.421440453,788.210720227,819.0,857.795008317,888.584288091,927.379296408,958.168576181,996.963584498,1027.75286427,1058.54214405,1097.33715236,1128.12643214,1166.92144045,1197.71072023,1228.5,1267.29500832,1298.08428809,1336.87929641,1367.66857618,1406.4635845,1437.25286427,1468.04214405,1506.83715236,1537.62643214,1576.42144045,1607.21072023,1638.0,1676.79500832,1707.58428809,1746.37929641,1777.16857618,1815.9635845,1846.75286427,1877.54214405,1916.33715236,1947.12643214,1985.92144045,2016.71072023,2047.5 };
const int Quantizer::hints8[] = { 0,12,24,36,48,60 };
// 9 | +g 17 3/2  |  pythagorean 17 notes
const float Quantizer::scale9[] = { 0.0,8.00572854376,38.7950083172,69.5842880906,77.5900166344,108.379296408,139.168576181,147.174304725,177.963584498,208.752864272,239.542144045,247.547872589,278.337152363,309.126432136,317.13216068,347.921440453,378.710720227,409.5,417.505728544,448.295008317,479.084288091,487.090016634,517.879296408,548.668576181,556.674304725,587.463584498,618.252864272,649.042144045,657.047872589,687.837152363,718.626432136,726.63216068,757.421440453,788.210720227,819.0,827.005728544,857.795008317,888.584288091,896.590016634,927.379296408,958.168576181,966.174304725,996.963584498,1027.75286427,1058.54214405,1066.54787259,1097.33715236,1128.12643214,1136.13216068,1166.92144045,1197.71072023,1228.5,1236.50572854,1267.29500832,1298.08428809,1306.09001663,1336.87929641,1367.66857618,1375.67430473,1406.4635845,1437.25286427,1468.04214405,1476.04787259,1506.83715236,1537.62643214,1545.63216068,1576.42144045,1607.21072023,1638.0,1646.00572854,1676.79500832,1707.58428809,1715.59001663,1746.37929641,1777.16857618,1785.17430473,1815.9635845,1846.75286427,1877.54214405,1885.54787259,1916.33715236,1947.12643214,1955.13216068,1985.92144045,2016.71072023,2047.5 };
const int Quantizer::hints9[] = { 0,17,34,51,68,85 };
// 10 | +g 5 696.5784285  |  quarter comma pentatonic
const float Quantizer::scale10[] = { 0.0,65.9147774512,131.829554902,237.707388726,303.622166177,409.5,475.414777451,541.329554902,647.207388726,713.122166177,819.0,884.914777451,950.829554902,1056.70738873,1122.62216618,1228.5,1294.41477745,1360.3295549,1466.20738873,1532.12216618,1638.0,1703.91477745,1769.8295549,1875.70738873,1941.62216618,2047.5 };
const int Quantizer::hints10[] = { 0,5,10,15,20,25 };
// 11 | +g 7 696.5784285  |  quarter comma diatonic
const float Quantizer::scale11[] = { 0.0,65.9147774512,131.829554902,197.744332354,237.707388726,303.622166177,369.536943628,409.5,475.414777451,541.329554902,607.244332354,647.207388726,713.122166177,779.036943628,819.0,884.914777451,950.829554902,1016.74433235,1056.70738873,1122.62216618,1188.53694363,1228.5,1294.41477745,1360.3295549,1426.24433235,1466.20738873,1532.12216618,1598.03694363,1638.0,1703.91477745,1769.8295549,1835.74433235,1875.70738873,1941.62216618,2007.53694363,2047.5 };
const int Quantizer::hints11[] = { 0,7,14,21,28,35 };
// 12 | +g 12 696.5784285  |  quarter comma chromatic
const float Quantizer::scale12[] = { 0.0,25.9517210794,65.9147774512,91.8664985306,131.829554902,157.781275982,197.744332354,237.707388726,263.659109805,303.622166177,329.573887256,369.536943628,409.5,435.451721079,475.414777451,501.366498531,541.329554902,567.281275982,607.244332354,647.207388726,673.159109805,713.122166177,739.073887256,779.036943628,819.0,844.951721079,884.914777451,910.866498531,950.829554902,976.781275982,1016.74433235,1056.70738873,1082.6591098,1122.62216618,1148.57388726,1188.53694363,1228.5,1254.45172108,1294.41477745,1320.36649853,1360.3295549,1386.28127598,1426.24433235,1466.20738873,1492.1591098,1532.12216618,1558.07388726,1598.03694363,1638.0,1663.95172108,1703.91477745,1729.86649853,1769.8295549,1795.78127598,1835.74433235,1875.70738873,1901.6591098,1941.62216618,1967.57388726,2007.53694363,2047.5 };
const int Quantizer::hints12[] = { 0,12,24,36,48,60 };
// 13 | +g 19 696.5784285  |  quarter comma 19 notes
const float Quantizer::scale13[] = { 0.0,25.9517210794,51.9034421587,65.9147774512,91.8664985306,117.81821961,131.829554902,157.781275982,183.732997061,197.744332354,223.696053433,237.707388726,263.659109805,289.610830884,303.622166177,329.573887256,355.525608336,369.536943628,395.488664707,409.5,435.451721079,461.403442159,475.414777451,501.366498531,527.31821961,541.329554902,567.281275982,593.232997061,607.244332354,633.196053433,647.207388726,673.159109805,699.110830884,713.122166177,739.073887256,765.025608336,779.036943628,804.988664707,819.0,844.951721079,870.903442159,884.914777451,910.866498531,936.81821961,950.829554902,976.781275982,1002.73299706,1016.74433235,1042.69605343,1056.70738873,1082.6591098,1108.61083088,1122.62216618,1148.57388726,1174.52560834,1188.53694363,1214.48866471,1228.5,1254.45172108,1280.40344216,1294.41477745,1320.36649853,1346.31821961,1360.3295549,1386.28127598,1412.23299706,1426.24433235,1452.19605343,1466.20738873,1492.1591098,1518.11083088,1532.12216618,1558.07388726,1584.02560834,1598.03694363,1623.98866471,1638.0,1663.95172108,1689.90344216,1703.91477745,1729.86649853,1755.81821961,1769.8295549,1795.78127598,1821.73299706,1835.74433235,1861.69605343,1875.70738873,1901.6591098,1927.61083088,1941.62216618,1967.57388726,1993.52560834,2007.53694363,2033.48866471,2047.5 };
const int Quantizer::hints13[] = { 0,19,38,57,76,95 };
// 14 | +g 31 696.5784285  |  quarter comma 31 notes or 31-equal (nearly)
const float Quantizer::scale14[] = { 0.0,11.9403857869,25.9517210794,37.8921068662,51.9034421587,65.9147774512,77.8551632381,91.8664985306,103.806884317,117.81821961,131.829554902,143.769940689,157.781275982,169.721661769,183.732997061,197.744332354,209.684718141,223.696053433,237.707388726,249.647774512,263.659109805,275.599495592,289.610830884,303.622166177,315.562551964,329.573887256,341.514273043,355.525608336,369.536943628,381.477329415,395.488664707,409.5,421.440385787,435.451721079,447.392106866,461.403442159,475.414777451,487.355163238,501.366498531,513.306884317,527.31821961,541.329554902,553.269940689,567.281275982,579.221661769,593.232997061,607.244332354,619.184718141,633.196053433,647.207388726,659.147774512,673.159109805,685.099495592,699.110830884,713.122166177,725.062551964,739.073887256,751.014273043,765.025608336,779.036943628,790.977329415,804.988664707,819.0,830.940385787,844.951721079,856.892106866,870.903442159,884.914777451,896.855163238,910.866498531,922.806884317,936.81821961,950.829554902,962.769940689,976.781275982,988.721661769,1002.73299706,1016.74433235,1028.68471814,1042.69605343,1056.70738873,1068.64777451,1082.6591098,1094.59949559,1108.61083088,1122.62216618,1134.56255196,1148.57388726,1160.51427304,1174.52560834,1188.53694363,1200.47732941,1214.48866471,1228.5,1240.44038579,1254.45172108,1266.39210687,1280.40344216,1294.41477745,1306.35516324,1320.36649853,1332.30688432,1346.31821961,1360.3295549,1372.26994069,1386.28127598,1398.22166177,1412.23299706,1426.24433235,1438.18471814,1452.19605343,1466.20738873,1478.14777451,1492.1591098,1504.09949559,1518.11083088,1532.12216618,1544.06255196,1558.07388726,1570.01427304,1584.02560834,1598.03694363,1609.97732941,1623.98866471,1638.0,1649.94038579,1663.95172108,1675.89210687,1689.90344216,1703.91477745,1715.85516324,1729.86649853,1741.80688432,1755.81821961,1769.8295549,1781.76994069,1795.78127598,1807.72166177,1821.73299706,1835.74433235,1847.68471814,1861.69605343,1875.70738873,1887.64777451,1901.6591098,1913.59949559,1927.61083088,1941.62216618,1953.56255196,1967.57388726,1979.51427304,1993.52560834,2007.53694363,2019.47732941,2033.48866471,2047.5 };
const int Quantizer::hints14[] = { 0,31,62,93,124,155 };
// 15 | +g 5 694.7862377  |  one third comma pentatonic
const float Quantizer::scale15[] = { 0.0,64.6916072303,129.383214461,237.095803615,301.787410845,409.5,474.19160723,538.88321446,646.595803615,711.287410845,819.0,883.69160723,948.38321446,1056.09580362,1120.78741085,1228.5,1293.19160723,1357.88321446,1465.59580362,1530.28741085,1638.0,1702.69160723,1767.38321446,1875.09580362,1939.78741085,2047.5 };
const int Quantizer::hints15[] = { 0,5,10,15,20,25 };
// 16 | +g 7 694.7862377  |  one third comma diatonic
const float Quantizer::scale16[] = { 0.0,64.6916072303,129.383214461,194.074821691,237.095803615,301.787410845,366.479018076,409.5,474.19160723,538.88321446,603.574821691,646.595803615,711.287410845,775.979018076,819.0,883.69160723,948.38321446,1013.07482169,1056.09580362,1120.78741085,1185.47901808,1228.5,1293.19160723,1357.88321446,1422.57482169,1465.59580362,1530.28741085,1594.97901808,1638.0,1702.69160723,1767.38321446,1832.07482169,1875.09580362,1939.78741085,2004.47901808,2047.5 };
const int Quantizer::hints16[] = { 0,7,14,21,28,35 };
// 17 | +g 12 694.7862377  |  one third comma chromatic
const float Quantizer::scale17[] = { 0.0,21.6706253059,64.6916072303,86.3622325361,129.383214461,151.053839766,194.074821691,237.095803615,258.766428921,301.787410845,323.458036151,366.479018076,409.5,431.170625306,474.19160723,495.862232536,538.88321446,560.553839766,603.574821691,646.595803615,668.266428921,711.287410845,732.958036151,775.979018076,819.0,840.670625306,883.69160723,905.362232536,948.38321446,970.053839766,1013.07482169,1056.09580362,1077.76642892,1120.78741085,1142.45803615,1185.47901808,1228.5,1250.17062531,1293.19160723,1314.86223254,1357.88321446,1379.55383977,1422.57482169,1465.59580362,1487.26642892,1530.28741085,1551.95803615,1594.97901808,1638.0,1659.67062531,1702.69160723,1724.36223254,1767.38321446,1789.05383977,1832.07482169,1875.09580362,1896.76642892,1939.78741085,1961.45803615,2004.47901808,2047.5 };
const int Quantizer::hints17[] = { 0,12,24,36,48,60 };
// 18 | +g 19 694.7862377  |  one third comma 19 notes or 19-equal (nearly)
const float Quantizer::scale18[] = { 0.0,21.6706253059,43.3412506118,64.6916072303,86.3622325361,108.032857842,129.383214461,151.053839766,172.724465072,194.074821691,215.745446997,237.095803615,258.766428921,280.437054227,301.787410845,323.458036151,345.128661457,366.479018076,388.149643382,409.5,431.170625306,452.841250612,474.19160723,495.862232536,517.532857842,538.88321446,560.553839766,582.224465072,603.574821691,625.245446997,646.595803615,668.266428921,689.937054227,711.287410845,732.958036151,754.628661457,775.979018076,797.649643382,819.0,840.670625306,862.341250612,883.69160723,905.362232536,927.032857842,948.38321446,970.053839766,991.724465072,1013.07482169,1034.745447,1056.09580362,1077.76642892,1099.43705423,1120.78741085,1142.45803615,1164.12866146,1185.47901808,1207.14964338,1228.5,1250.17062531,1271.84125061,1293.19160723,1314.86223254,1336.53285784,1357.88321446,1379.55383977,1401.22446507,1422.57482169,1444.245447,1465.59580362,1487.26642892,1508.93705423,1530.28741085,1551.95803615,1573.62866146,1594.97901808,1616.64964338,1638.0,1659.67062531,1681.34125061,1702.69160723,1724.36223254,1746.03285784,1767.38321446,1789.05383977,1810.72446507,1832.07482169,1853.745447,1875.09580362,1896.76642892,1918.43705423,1939.78741085,1961.45803615,1983.12866146,2004.47901808,2026.14964338,2047.5 };
const int Quantizer::hints18[] = { 0,19,38,57,76,95 };
// 19 | +g 5 695.8103467  |  two sevenths comma pentatonic
const float Quantizer::scale19[] = { 0.0,65.3905616227,130.781123245,237.445280811,302.835842434,409.5,474.890561623,540.281123245,646.945280811,712.335842434,819.0,884.390561623,949.781123245,1056.44528081,1121.83584243,1228.5,1293.89056162,1359.28112325,1465.94528081,1531.33584243,1638.0,1703.39056162,1768.78112325,1875.44528081,1940.83584243,2047.5 };
const int Quantizer::hints19[] = { 0,5,10,15,20,25 };
// 20 | +g 7 695.8103467  |  two sevenths comma diatonic
const float Quantizer::scale20[] = { 0.0,65.3905616227,130.781123245,196.171684868,237.445280811,302.835842434,368.226404057,409.5,474.890561623,540.281123245,605.671684868,646.945280811,712.335842434,777.726404057,819.0,884.390561623,949.781123245,1015.17168487,1056.44528081,1121.83584243,1187.22640406,1228.5,1293.89056162,1359.28112325,1424.67168487,1465.94528081,1531.33584243,1596.72640406,1638.0,1703.39056162,1768.78112325,1834.17168487,1875.44528081,1940.83584243,2006.22640406,2047.5 };
const int Quantizer::hints20[] = { 0,7,14,21,28,35 };
// 21 | +g 12 695.8103467  |  two sevenths comma chromatic
const float Quantizer::scale21[] = { 0.0,24.1169656796,65.3905616227,89.5075273024,130.781123245,154.898088925,196.171684868,237.445280811,261.562246491,302.835842434,326.952808114,368.226404057,409.5,433.61696568,474.890561623,499.007527302,540.281123245,564.398088925,605.671684868,646.945280811,671.062246491,712.335842434,736.452808114,777.726404057,819.0,843.11696568,884.390561623,908.507527302,949.781123245,973.898088925,1015.17168487,1056.44528081,1080.56224649,1121.83584243,1145.95280811,1187.22640406,1228.5,1252.61696568,1293.89056162,1318.0075273,1359.28112325,1383.39808893,1424.67168487,1465.94528081,1490.06224649,1531.33584243,1555.45280811,1596.72640406,1638.0,1662.11696568,1703.39056162,1727.5075273,1768.78112325,1792.89808893,1834.17168487,1875.44528081,1899.56224649,1940.83584243,1964.95280811,2006.22640406,2047.5 };
const int Quantizer::hints21[] = { 0,12,24,36,48,60 };
// 22 | scl/werck3.scl | Andreas Werckmeister's temperament III (the most famous one, 1681)
const float Quantizer::scale22[] = { 0.0,30.7892797734,65.581425,100.373567864,133.16428125,169.957855955,200.747135728,237.5407125,270.331423819,303.122134088,339.915711909,372.706425,409.5,440.289279773,475.081425,509.873567864,542.66428125,579.457855955,610.247135728,647.0407125,679.831423819,712.622134087,749.415711909,782.206425,819.0,849.789279773,884.581425,919.373567864,952.16428125,988.957855955,1019.74713573,1056.5407125,1089.33142382,1122.12213409,1158.91571191,1191.706425,1228.5,1259.28927977,1294.081425,1328.87356786,1361.66428125,1398.45785595,1429.24713573,1466.0407125,1498.83142382,1531.62213409,1568.41571191,1601.206425,1638.0,1668.78927977,1703.581425,1738.37356786,1771.16428125,1807.95785595,1838.74713573,1875.5407125,1908.33142382,1941.12213409,1977.91571191,2010.706425,2047.5 };
const int Quantizer::hints22[] = { 0,12,24,36,48,60 };
// 23 | scl/werck4.scl | Andreas Werckmeister's temperament IV
const float Quantizer::scale23[] = { 0.0,28.1207028375,66.9157125,100.373567864,133.831425,169.957855955,200.747135728,236.87356875,267.662846587,303.78928125,342.5842875,370.704991683,409.5,437.620702838,476.4157125,509.873567864,543.331425,579.457855955,610.247135728,646.37356875,677.162846587,713.28928125,752.0842875,780.204991683,819.0,847.120702837,885.9157125,919.373567864,952.831425,988.957855955,1019.74713573,1055.87356875,1086.66284659,1122.78928125,1161.5842875,1189.70499168,1228.5,1256.62070284,1295.4157125,1328.87356786,1362.331425,1398.45785595,1429.24713573,1465.37356875,1496.16284659,1532.28928125,1571.0842875,1599.20499168,1638.0,1666.12070284,1704.9157125,1738.37356786,1771.831425,1807.95785595,1838.74713573,1874.87356875,1905.66284659,1941.78928125,1980.5842875,2008.70499168,2047.5 };
const int Quantizer::hints23[] = { 0,12,24,36,48,60 };
// 24 | scl/werck5.scl | Andreas Werckmeister's temperament V
const float Quantizer::scale24[] = { 0.0,32.7907125,69.5842880906,102.375,135.1657125,171.9592875,204.75,239.542144045,270.331423819,307.125,341.91714375,374.70785625,409.5,442.2907125,479.084288091,511.875,544.6657125,581.4592875,614.25,649.042144045,679.831423819,716.625,751.41714375,784.20785625,819.0,851.7907125,888.584288091,921.375,954.1657125,990.9592875,1023.75,1058.54214405,1089.33142382,1126.125,1160.91714375,1193.70785625,1228.5,1261.2907125,1298.08428809,1330.875,1363.6657125,1400.4592875,1433.25,1468.04214405,1498.83142382,1535.625,1570.41714375,1603.20785625,1638.0,1670.7907125,1707.58428809,1740.375,1773.1657125,1809.9592875,1842.75,1877.54214405,1908.33142382,1945.125,1979.91714375,2012.70785625,2047.5 };
const int Quantizer::hints24[] = { 0,12,24,36,48,60 };
// 25 | scl/werck6.scl | Andreas Werckmeister's "septenarius" tuning VI, D is probably erroneous
const float Quantizer::scale25[] = { 0.0,30.9381480164,63.5864333332,101.714734432,134.851472541,169.957855955,203.017311885,238.036962036,270.480292062,304.809328496,341.256878477,374.393616586,409.5,440.438148016,473.086433333,511.214734432,544.351472541,579.457855955,612.517311885,647.536962036,679.980292062,714.309328496,750.756878477,783.893616586,819.0,849.938148016,882.586433333,920.714734432,953.851472541,988.957855955,1022.01731188,1057.03696204,1089.48029206,1123.8093285,1160.25687848,1193.39361659,1228.5,1259.43814802,1292.08643333,1330.21473443,1363.35147254,1398.45785595,1431.51731188,1466.53696204,1498.98029206,1533.3093285,1569.75687848,1602.89361659,1638.0,1668.93814802,1701.58643333,1739.71473443,1772.85147254,1807.95785595,1841.01731188,1876.03696204,1908.48029206,1942.8093285,1979.25687848,2012.39361659,2047.5 };
const int Quantizer::hints25[] = { 0,12,24,36,48,60 };
// 26 | scl/neidhardt1.scl | Neidhardt I temperament (1724)
const float Quantizer::scale26[] = { 0.0,32.12356875,66.9157125,101.0407125,133.831425,169.957855955,202.081425,238.20785625,271.6657125,305.12356875,339.915711909,372.706425,409.5,441.62356875,476.4157125,510.5407125,543.331425,579.457855955,611.581425,647.70785625,681.1657125,714.62356875,749.415711909,782.206425,819.0,851.12356875,885.9157125,920.0407125,952.831425,988.957855955,1021.081425,1057.20785625,1090.6657125,1124.12356875,1158.91571191,1191.706425,1228.5,1260.62356875,1295.4157125,1329.5407125,1362.331425,1398.45785595,1430.581425,1466.70785625,1500.1657125,1533.62356875,1568.41571191,1601.206425,1638.0,1670.12356875,1704.9157125,1739.0407125,1771.831425,1807.95785595,1840.081425,1876.20785625,1909.6657125,1943.12356875,1977.91571191,2010.706425,2047.5 };
const int Quantizer::hints26[] = { 0,12,24,36,48,60 };
// 27 | scl/neidhardt2.scl | Neidhardt II temperament (1724)
const float Quantizer::scale27[] = { 0.0,32.7907125,66.9157125,101.70785625,134.49856875,170.625,203.4157125,238.20785625,271.6657125,305.12356875,341.25,374.0407125,409.5,442.2907125,476.4157125,511.20785625,543.99856875,580.125,612.9157125,647.70785625,681.1657125,714.62356875,750.75,783.5407125,819.0,851.7907125,885.9157125,920.70785625,953.49856875,989.625,1022.4157125,1057.20785625,1090.6657125,1124.12356875,1160.25,1193.0407125,1228.5,1261.2907125,1295.4157125,1330.20785625,1362.99856875,1399.125,1431.9157125,1466.70785625,1500.1657125,1533.62356875,1569.75,1602.5407125,1638.0,1670.7907125,1704.9157125,1739.70785625,1772.49856875,1808.625,1841.4157125,1876.20785625,1909.6657125,1943.12356875,1979.25,2012.0407125,2047.5 };
const int Quantizer::hints27[] = { 0,12,24,36,48,60 };
// 28 | scl/neidhardt3.scl | Neidhardt III temperament (1724) 'große Stadt'
const float Quantizer::scale28[] = { 0.0,32.7907125,66.9157125,101.70785625,134.49856875,169.957855955,203.4157125,238.20785625,271.6657125,305.12356875,340.58285625,374.0407125,409.5,442.2907125,476.4157125,511.20785625,543.99856875,579.457855955,612.9157125,647.70785625,681.1657125,714.62356875,750.08285625,783.5407125,819.0,851.7907125,885.9157125,920.70785625,953.49856875,988.957855955,1022.4157125,1057.20785625,1090.6657125,1124.12356875,1159.58285625,1193.0407125,1228.5,1261.2907125,1295.4157125,1330.20785625,1362.99856875,1398.45785595,1431.9157125,1466.70785625,1500.1657125,1533.62356875,1569.08285625,1602.5407125,1638.0,1670.7907125,1704.9157125,1739.70785625,1772.49856875,1807.95785595,1841.4157125,1876.20785625,1909.6657125,1943.12356875,1978.58285625,2012.0407125,2047.5 };
const int Quantizer::hints28[] = { 0,12,24,36,48,60 };
// 29 | scl/kirnberger2.scl | Kirnberger 2: 1/2 synt. comma. "Die Kunst des reinen Satzes" (1774)
const float Quantizer::scale29[] = { 0.0,31.4559869923,69.5842880906,100.373567864,131.829554856,169.957855955,201.413842947,239.542144045,270.998131038,305.445525404,339.915711909,371.371698902,409.5,440.955986992,479.084288091,509.873567864,541.329554856,579.457855955,610.913842947,649.042144045,680.498131038,714.945525404,749.415711909,780.871698902,819.0,850.455986992,888.584288091,919.373567864,950.829554856,988.957855955,1020.41384295,1058.54214405,1089.99813104,1124.4455254,1158.91571191,1190.3716989,1228.5,1259.95598699,1298.08428809,1328.87356786,1360.32955486,1398.45785595,1429.91384295,1468.04214405,1499.49813104,1533.9455254,1568.41571191,1599.8716989,1638.0,1669.45598699,1707.58428809,1738.37356786,1769.82955486,1807.95785595,1839.41384295,1877.54214405,1908.99813104,1943.4455254,1977.91571191,2009.3716989,2047.5 };
const int Quantizer::hints29[] = { 0,12,24,36,48,60 };
// 30 | scl/kirnberger3.scl | Kirnberger 3: 1/4 synt. comma (1744)
const float Quantizer::scale30[] = { 0.0,31.4559869923,65.914778475,100.373567864,131.829554856,169.957855955,201.413842947,237.707389237,270.998131038,303.622167712,339.915711909,371.371698902,409.5,440.955986992,475.414778475,509.873567864,541.329554856,579.457855955,610.913842947,647.207389238,680.498131038,713.122167713,749.415711909,780.871698902,819.0,850.455986992,884.914778475,919.373567864,950.829554856,988.957855955,1020.41384295,1056.70738924,1089.99813104,1122.62216771,1158.91571191,1190.3716989,1228.5,1259.95598699,1294.41477848,1328.87356786,1360.32955486,1398.45785595,1429.91384295,1466.20738924,1499.49813104,1532.12216771,1568.41571191,1599.8716989,1638.0,1669.45598699,1703.91477848,1738.37356786,1769.82955486,1807.95785595,1839.41384295,1875.70738924,1908.99813104,1941.62216771,1977.91571191,2009.3716989,2047.5 };
const int Quantizer::hints30[] = { 0,12,24,36,48,60 };
// 31 | scl/vallotti2.scl | Francesco Antonio Vallotti temperament, 1/6-comma
const float Quantizer::scale31[] = { 0.0,32.679157875,67.13794815,102.263445375,134.2758963,171.181025925,202.637014125,238.318974075,272.221301625,305.456922225,341.805589125,372.594870375,409.5,442.179157875,476.63794815,511.763445375,543.7758963,580.681025925,612.137014125,647.818974075,681.721301625,714.956922225,751.305589125,782.094870375,819.0,851.679157875,886.13794815,921.263445375,953.2758963,990.181025925,1021.63701413,1057.31897408,1091.22130163,1124.45692222,1160.80558912,1191.59487038,1228.5,1261.17915788,1295.63794815,1330.76344537,1362.7758963,1399.68102593,1431.13701412,1466.81897407,1500.72130163,1533.95692222,1570.30558912,1601.09487038,1638.0,1670.67915788,1705.13794815,1740.26344537,1772.2758963,1809.18102593,1840.63701412,1876.31897407,1910.22130163,1943.45692222,1979.80558912,2010.59487038,2047.5 };
const int Quantizer::hints31[] = { 0,12,24,36,48,60 };
// 32 | scl/young1.scl | Thomas Young well temperament no.1 (1800), 1/12 and 3/16 synt. comma
const float Quantizer::scale32[] = { 0.0,32.0283550223,66.8317507726,101.621218996,133.663828672,170.580476004,201.996606003,238.167219378,271.576736061,304.986287115,341.166871393,372.584048404,409.5,441.528355022,476.331750773,511.121218996,543.163828672,580.080476004,611.496606003,647.667219378,681.076736061,714.486287115,750.666871393,782.084048404,819.0,851.028355022,885.831750773,920.621218996,952.663828672,989.580476004,1020.996606,1057.16721938,1090.57673606,1123.98628712,1160.16687139,1191.5840484,1228.5,1260.52835502,1295.33175077,1330.121219,1362.16382867,1399.080476,1430.496606,1466.66721938,1500.07673606,1533.48628712,1569.66687139,1601.0840484,1638.0,1670.02835502,1704.83175077,1739.621219,1771.66382867,1808.580476,1839.996606,1876.16721938,1909.57673606,1942.98628712,1979.16687139,2010.5840484,2047.5 };
const int Quantizer::hints32[] = { 0,12,24,36,48,60 };
// 33 | scl/young2.scl | Thomas Young well temperament no.2 (1799)
const float Quantizer::scale33[] = { 0.0,32.12356875,66.9157125,101.70785625,133.831425,170.625,202.081425,238.20785625,271.6657125,305.12356875,341.25,372.706425,409.5,441.62356875,476.4157125,511.20785625,543.331425,580.125,611.581425,647.70785625,681.1657125,714.62356875,750.75,782.206425,819.0,851.12356875,885.9157125,920.70785625,952.831425,989.625,1021.081425,1057.20785625,1090.6657125,1124.12356875,1160.25,1191.706425,1228.5,1260.62356875,1295.4157125,1330.20785625,1362.331425,1399.125,1430.581425,1466.70785625,1500.1657125,1533.62356875,1569.75,1601.206425,1638.0,1670.12356875,1704.9157125,1739.70785625,1771.831425,1808.625,1840.081425,1876.20785625,1909.6657125,1943.12356875,1979.25,2010.706425,2047.5 };
const int Quantizer::hints33[] = { 0,12,24,36,48,60 };
// 34 | +e 1  |  1-equal or octaves
const float Quantizer::scale34[] = { 0.0,409.5,819.0,1228.5,1638.0,2047.5 };
const int Quantizer::hints34[] = { 0,1,2,3,4,5 };
// 35 | +e 2  |  2-equal or tritones
const float Quantizer::scale35[] = { 0.0,204.75,409.5,614.25,819.0,1023.75,1228.5,1433.25,1638.0,1842.75,2047.5 };
const int Quantizer::hints35[] = { 0,2,4,6,8,10 };
// 36 | +e 3  |  3-equal or major thirds or augmented triad
const float Quantizer::scale36[] = { 0.0,136.5,273.0,409.5,546.0,682.5,819.0,955.5,1092.0,1228.5,1365.0,1501.5,1638.0,1774.5,1911.0,2047.5 };
const int Quantizer::hints36[] = { 0,3,6,9,12,15 };
// 37 | +e 4  |  4-equal or minor thirds or diminished seventh
const float Quantizer::scale37[] = { 0.0,102.375,204.75,307.125,409.5,511.875,614.25,716.625,819.0,921.375,1023.75,1126.125,1228.5,1330.875,1433.25,1535.625,1638.0,1740.375,1842.75,1945.125,2047.5 };
const int Quantizer::hints37[] = { 0,4,8,12,16,20 };
// 38 | +e 5  |  5-equal
const float Quantizer::scale38[] = { 0.0,81.9,163.8,245.7,327.6,409.5,491.4,573.3,655.2,737.1,819.0,900.9,982.8,1064.7,1146.6,1228.5,1310.4,1392.3,1474.2,1556.1,1638.0,1719.9,1801.8,1883.7,1965.6,2047.5 };
const int Quantizer::hints38[] = { 0,5,10,15,20,25 };
// 39 | +e 6  |  6-equal or whole tones
const float Quantizer::scale39[] = { 0.0,68.25,136.5,204.75,273.0,341.25,409.5,477.75,546.0,614.25,682.5,750.75,819.0,887.25,955.5,1023.75,1092.0,1160.25,1228.5,1296.75,1365.0,1433.25,1501.5,1569.75,1638.0,1706.25,1774.5,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints39[] = { 0,6,12,18,24,30 };
// 40 | +e 7  |  7-equal
const float Quantizer::scale40[] = { 0.0,58.5,117.0,175.5,234.0,292.5,351.0,409.5,468.0,526.5,585.0,643.5,702.0,760.5,819.0,877.5,936.0,994.5,1053.0,1111.5,1170.0,1228.5,1287.0,1345.5,1404.0,1462.5,1521.0,1579.5,1638.0,1696.5,1755.0,1813.5,1872.0,1930.5,1989.0,2047.5 };
const int Quantizer::hints40[] = { 0,7,14,21,28,35 };
// 41 | +e 8  |  8-equal
const float Quantizer::scale41[] = { 0.0,51.1875,102.375,153.5625,204.75,255.9375,307.125,358.3125,409.5,460.6875,511.875,563.0625,614.25,665.4375,716.625,767.8125,819.0,870.1875,921.375,972.5625,1023.75,1074.9375,1126.125,1177.3125,1228.5,1279.6875,1330.875,1382.0625,1433.25,1484.4375,1535.625,1586.8125,1638.0,1689.1875,1740.375,1791.5625,1842.75,1893.9375,1945.125,1996.3125,2047.5 };
const int Quantizer::hints41[] = { 0,8,16,24,32,40 };
// 42 | +e 9  |  9-equal
const float Quantizer::scale42[] = { 0.0,45.5,91.0,136.5,182.0,227.5,273.0,318.5,364.0,409.5,455.0,500.5,546.0,591.5,637.0,682.5,728.0,773.5,819.0,864.5,910.0,955.5,1001.0,1046.5,1092.0,1137.5,1183.0,1228.5,1274.0,1319.5,1365.0,1410.5,1456.0,1501.5,1547.0,1592.5,1638.0,1683.5,1729.0,1774.5,1820.0,1865.5,1911.0,1956.5,2002.0,2047.5 };
const int Quantizer::hints42[] = { 0,9,18,27,36,45 };
// 43 | +e 10  |  10-equal
const float Quantizer::scale43[] = { 0.0,40.95,81.9,122.85,163.8,204.75,245.7,286.65,327.6,368.55,409.5,450.45,491.4,532.35,573.3,614.25,655.2,696.15,737.1,778.05,819.0,859.95,900.9,941.85,982.8,1023.75,1064.7,1105.65,1146.6,1187.55,1228.5,1269.45,1310.4,1351.35,1392.3,1433.25,1474.2,1515.15,1556.1,1597.05,1638.0,1678.95,1719.9,1760.85,1801.8,1842.75,1883.7,1924.65,1965.6,2006.55,2047.5 };
const int Quantizer::hints43[] = { 0,10,20,30,40,50 };
// 44 | +e 11  |  11-equal
const float Quantizer::scale44[] = { 0.0,37.2272727273,74.4545454545,111.681818182,148.909090909,186.136363636,223.363636364,260.590909091,297.818181818,335.045454545,372.272727273,409.5,446.727272727,483.954545455,521.181818182,558.409090909,595.636363636,632.863636364,670.090909091,707.318181818,744.545454545,781.772727273,819.0,856.227272727,893.454545455,930.681818182,967.909090909,1005.13636364,1042.36363636,1079.59090909,1116.81818182,1154.04545455,1191.27272727,1228.5,1265.72727273,1302.95454545,1340.18181818,1377.40909091,1414.63636364,1451.86363636,1489.09090909,1526.31818182,1563.54545455,1600.77272727,1638.0,1675.22727273,1712.45454545,1749.68181818,1786.90909091,1824.13636364,1861.36363636,1898.59090909,1935.81818182,1973.04545455,2010.27272727,2047.5 };
const int Quantizer::hints44[] = { 0,11,22,33,44,55 };
// 45 | +e 13  |  13-equal
const float Quantizer::scale45[] = { 0.0,31.5,63.0,94.5,126.0,157.5,189.0,220.5,252.0,283.5,315.0,346.5,378.0,409.5,441.0,472.5,504.0,535.5,567.0,598.5,630.0,661.5,693.0,724.5,756.0,787.5,819.0,850.5,882.0,913.5,945.0,976.5,1008.0,1039.5,1071.0,1102.5,1134.0,1165.5,1197.0,1228.5,1260.0,1291.5,1323.0,1354.5,1386.0,1417.5,1449.0,1480.5,1512.0,1543.5,1575.0,1606.5,1638.0,1669.5,1701.0,1732.5,1764.0,1795.5,1827.0,1858.5,1890.0,1921.5,1953.0,1984.5,2016.0,2047.5 };
const int Quantizer::hints45[] = { 0,13,26,39,52,65 };
// 46 | +e 14  |  14-equal
const float Quantizer::scale46[] = { 0.0,29.25,58.5,87.75,117.0,146.25,175.5,204.75,234.0,263.25,292.5,321.75,351.0,380.25,409.5,438.75,468.0,497.25,526.5,555.75,585.0,614.25,643.5,672.75,702.0,731.25,760.5,789.75,819.0,848.25,877.5,906.75,936.0,965.25,994.5,1023.75,1053.0,1082.25,1111.5,1140.75,1170.0,1199.25,1228.5,1257.75,1287.0,1316.25,1345.5,1374.75,1404.0,1433.25,1462.5,1491.75,1521.0,1550.25,1579.5,1608.75,1638.0,1667.25,1696.5,1725.75,1755.0,1784.25,1813.5,1842.75,1872.0,1901.25,1930.5,1959.75,1989.0,2018.25,2047.5 };
const int Quantizer::hints46[] = { 0,14,28,42,56,70 };
// 47 | +e 15  |  15-equal
const float Quantizer::scale47[] = { 0.0,27.3,54.6,81.9,109.2,136.5,163.8,191.1,218.4,245.7,273.0,300.3,327.6,354.9,382.2,409.5,436.8,464.1,491.4,518.7,546.0,573.3,600.6,627.9,655.2,682.5,709.8,737.1,764.4,791.7,819.0,846.3,873.6,900.9,928.2,955.5,982.8,1010.1,1037.4,1064.7,1092.0,1119.3,1146.6,1173.9,1201.2,1228.5,1255.8,1283.1,1310.4,1337.7,1365.0,1392.3,1419.6,1446.9,1474.2,1501.5,1528.8,1556.1,1583.4,1610.7,1638.0,1665.3,1692.6,1719.9,1747.2,1774.5,1801.8,1829.1,1856.4,1883.7,1911.0,1938.3,1965.6,1992.9,2020.2,2047.5 };
const int Quantizer::hints47[] = { 0,15,30,45,60,75 };
// 48 | +e 16  |  16-equal
const float Quantizer::scale48[] = { 0.0,25.59375,51.1875,76.78125,102.375,127.96875,153.5625,179.15625,204.75,230.34375,255.9375,281.53125,307.125,332.71875,358.3125,383.90625,409.5,435.09375,460.6875,486.28125,511.875,537.46875,563.0625,588.65625,614.25,639.84375,665.4375,691.03125,716.625,742.21875,767.8125,793.40625,819.0,844.59375,870.1875,895.78125,921.375,946.96875,972.5625,998.15625,1023.75,1049.34375,1074.9375,1100.53125,1126.125,1151.71875,1177.3125,1202.90625,1228.5,1254.09375,1279.6875,1305.28125,1330.875,1356.46875,1382.0625,1407.65625,1433.25,1458.84375,1484.4375,1510.03125,1535.625,1561.21875,1586.8125,1612.40625,1638.0,1663.59375,1689.1875,1714.78125,1740.375,1765.96875,1791.5625,1817.15625,1842.75,1868.34375,1893.9375,1919.53125,1945.125,1970.71875,1996.3125,2021.90625,2047.5 };
const int Quantizer::hints48[] = { 0,16,32,48,64,80 };
// 49 | +e 17  |  17-equal
const float Quantizer::scale49[] = { 0.0,24.0882352941,48.1764705882,72.2647058824,96.3529411765,120.441176471,144.529411765,168.617647059,192.705882353,216.794117647,240.882352941,264.970588235,289.058823529,313.147058824,337.235294118,361.323529412,385.411764706,409.5,433.588235294,457.676470588,481.764705882,505.852941176,529.941176471,554.029411765,578.117647059,602.205882353,626.294117647,650.382352941,674.470588235,698.558823529,722.647058824,746.735294118,770.823529412,794.911764706,819.0,843.088235294,867.176470588,891.264705882,915.352941176,939.441176471,963.529411765,987.617647059,1011.70588235,1035.79411765,1059.88235294,1083.97058824,1108.05882353,1132.14705882,1156.23529412,1180.32352941,1204.41176471,1228.5,1252.58823529,1276.67647059,1300.76470588,1324.85294118,1348.94117647,1373.02941176,1397.11764706,1421.20588235,1445.29411765,1469.38235294,1493.47058824,1517.55882353,1541.64705882,1565.73529412,1589.82352941,1613.91176471,1638.0,1662.08823529,1686.17647059,1710.26470588,1734.35294118,1758.44117647,1782.52941176,1806.61764706,1830.70588235,1854.79411765,1878.88235294,1902.97058824,1927.05882353,1951.14705882,1975.23529412,1999.32352941,2023.41176471,2047.5 };
const int Quantizer::hints49[] = { 0,17,34,51,68,85 };
// 50 | +e 18  |  18-equal
const float Quantizer::scale50[] = { 0.0,22.75,45.5,68.25,91.0,113.75,136.5,159.25,182.0,204.75,227.5,250.25,273.0,295.75,318.5,341.25,364.0,386.75,409.5,432.25,455.0,477.75,500.5,523.25,546.0,568.75,591.5,614.25,637.0,659.75,682.5,705.25,728.0,750.75,773.5,796.25,819.0,841.75,864.5,887.25,910.0,932.75,955.5,978.25,1001.0,1023.75,1046.5,1069.25,1092.0,1114.75,1137.5,1160.25,1183.0,1205.75,1228.5,1251.25,1274.0,1296.75,1319.5,1342.25,1365.0,1387.75,1410.5,1433.25,1456.0,1478.75,1501.5,1524.25,1547.0,1569.75,1592.5,1615.25,1638.0,1660.75,1683.5,1706.25,1729.0,1751.75,1774.5,1797.25,1820.0,1842.75,1865.5,1888.25,1911.0,1933.75,1956.5,1979.25,2002.0,2024.75,2047.5 };
const int Quantizer::hints50[] = { 0,18,36,54,72,90 };
// 51 | +e 19  |  19-equal
const float Quantizer::scale51[] = { 0.0,21.5526315789,43.1052631579,64.6578947368,86.2105263158,107.763157895,129.315789474,150.868421053,172.421052632,193.973684211,215.526315789,237.078947368,258.631578947,280.184210526,301.736842105,323.289473684,344.842105263,366.394736842,387.947368421,409.5,431.052631579,452.605263158,474.157894737,495.710526316,517.263157895,538.815789474,560.368421053,581.921052632,603.473684211,625.026315789,646.578947368,668.131578947,689.684210526,711.236842105,732.789473684,754.342105263,775.894736842,797.447368421,819.0,840.552631579,862.105263158,883.657894737,905.210526316,926.763157895,948.315789474,969.868421053,991.421052632,1012.97368421,1034.52631579,1056.07894737,1077.63157895,1099.18421053,1120.73684211,1142.28947368,1163.84210526,1185.39473684,1206.94736842,1228.5,1250.05263158,1271.60526316,1293.15789474,1314.71052632,1336.26315789,1357.81578947,1379.36842105,1400.92105263,1422.47368421,1444.02631579,1465.57894737,1487.13157895,1508.68421053,1530.23684211,1551.78947368,1573.34210526,1594.89473684,1616.44736842,1638.0,1659.55263158,1681.10526316,1702.65789474,1724.21052632,1745.76315789,1767.31578947,1788.86842105,1810.42105263,1831.97368421,1853.52631579,1875.07894737,1896.63157895,1918.18421053,1939.73684211,1961.28947368,1982.84210526,2004.39473684,2025.94736842,2047.5 };
const int Quantizer::hints51[] = { 0,19,38,57,76,95 };
// 52 | +e 20  |  20-equal
const float Quantizer::scale52[] = { 0.0,20.475,40.95,61.425,81.9,102.375,122.85,143.325,163.8,184.275,204.75,225.225,245.7,266.175,286.65,307.125,327.6,348.075,368.55,389.025,409.5,429.975,450.45,470.925,491.4,511.875,532.35,552.825,573.3,593.775,614.25,634.725,655.2,675.675,696.15,716.625,737.1,757.575,778.05,798.525,819.0,839.475,859.95,880.425,900.9,921.375,941.85,962.325,982.8,1003.275,1023.75,1044.225,1064.7,1085.175,1105.65,1126.125,1146.6,1167.075,1187.55,1208.025,1228.5,1248.975,1269.45,1289.925,1310.4,1330.875,1351.35,1371.825,1392.3,1412.775,1433.25,1453.725,1474.2,1494.675,1515.15,1535.625,1556.1,1576.575,1597.05,1617.525,1638.0,1658.475,1678.95,1699.425,1719.9,1740.375,1760.85,1781.325,1801.8,1822.275,1842.75,1863.225,1883.7,1904.175,1924.65,1945.125,1965.6,1986.075,2006.55,2027.025,2047.5 };
const int Quantizer::hints52[] = { 0,20,40,60,80,100 };
// 53 | +e 21  |  21-equal
const float Quantizer::scale53[] = { 0.0,19.5,39.0,58.5,78.0,97.5,117.0,136.5,156.0,175.5,195.0,214.5,234.0,253.5,273.0,292.5,312.0,331.5,351.0,370.5,390.0,409.5,429.0,448.5,468.0,487.5,507.0,526.5,546.0,565.5,585.0,604.5,624.0,643.5,663.0,682.5,702.0,721.5,741.0,760.5,780.0,799.5,819.0,838.5,858.0,877.5,897.0,916.5,936.0,955.5,975.0,994.5,1014.0,1033.5,1053.0,1072.5,1092.0,1111.5,1131.0,1150.5,1170.0,1189.5,1209.0,1228.5,1248.0,1267.5,1287.0,1306.5,1326.0,1345.5,1365.0,1384.5,1404.0,1423.5,1443.0,1462.5,1482.0,1501.5,1521.0,1540.5,1560.0,1579.5,1599.0,1618.5,1638.0,1657.5,1677.0,1696.5,1716.0,1735.5,1755.0,1774.5,1794.0,1813.5,1833.0,1852.5,1872.0,1891.5,1911.0,1930.5,1950.0,1969.5,1989.0,2008.5,2028.0,2047.5 };
const int Quantizer::hints53[] = { 0,21,42,63,84,105 };
// 54 | +e 22  |  22-equal
const float Quantizer::scale54[] = { 0.0,18.6136363636,37.2272727273,55.8409090909,74.4545454545,93.0681818182,111.681818182,130.295454545,148.909090909,167.522727273,186.136363636,204.75,223.363636364,241.977272727,260.590909091,279.204545455,297.818181818,316.431818182,335.045454545,353.659090909,372.272727273,390.886363636,409.5,428.113636364,446.727272727,465.340909091,483.954545455,502.568181818,521.181818182,539.795454545,558.409090909,577.022727273,595.636363636,614.25,632.863636364,651.477272727,670.090909091,688.704545455,707.318181818,725.931818182,744.545454545,763.159090909,781.772727273,800.386363636,819.0,837.613636364,856.227272727,874.840909091,893.454545455,912.068181818,930.681818182,949.295454545,967.909090909,986.522727273,1005.13636364,1023.75,1042.36363636,1060.97727273,1079.59090909,1098.20454545,1116.81818182,1135.43181818,1154.04545455,1172.65909091,1191.27272727,1209.88636364,1228.5,1247.11363636,1265.72727273,1284.34090909,1302.95454545,1321.56818182,1340.18181818,1358.79545455,1377.40909091,1396.02272727,1414.63636364,1433.25,1451.86363636,1470.47727273,1489.09090909,1507.70454545,1526.31818182,1544.93181818,1563.54545455,1582.15909091,1600.77272727,1619.38636364,1638.0,1656.61363636,1675.22727273,1693.84090909,1712.45454545,1731.06818182,1749.68181818,1768.29545455,1786.90909091,1805.52272727,1824.13636364,1842.75,1861.36363636,1879.97727273,1898.59090909,1917.20454545,1935.81818182,1954.43181818,1973.04545455,1991.65909091,2010.27272727,2028.88636364,2047.5 };
const int Quantizer::hints54[] = { 0,22,44,66,88,110 };
// 55 | +e 23  |  23-equal
const float Quantizer::scale55[] = { 0.0,17.8043478261,35.6086956522,53.4130434783,71.2173913043,89.0217391304,106.826086957,124.630434783,142.434782609,160.239130435,178.043478261,195.847826087,213.652173913,231.456521739,249.260869565,267.065217391,284.869565217,302.673913043,320.47826087,338.282608696,356.086956522,373.891304348,391.695652174,409.5,427.304347826,445.108695652,462.913043478,480.717391304,498.52173913,516.326086957,534.130434783,551.934782609,569.739130435,587.543478261,605.347826087,623.152173913,640.956521739,658.760869565,676.565217391,694.369565217,712.173913043,729.97826087,747.782608696,765.586956522,783.391304348,801.195652174,819.0,836.804347826,854.608695652,872.413043478,890.217391304,908.02173913,925.826086957,943.630434783,961.434782609,979.239130435,997.043478261,1014.84782609,1032.65217391,1050.45652174,1068.26086957,1086.06521739,1103.86956522,1121.67391304,1139.47826087,1157.2826087,1175.08695652,1192.89130435,1210.69565217,1228.5,1246.30434783,1264.10869565,1281.91304348,1299.7173913,1317.52173913,1335.32608696,1353.13043478,1370.93478261,1388.73913043,1406.54347826,1424.34782609,1442.15217391,1459.95652174,1477.76086957,1495.56521739,1513.36956522,1531.17391304,1548.97826087,1566.7826087,1584.58695652,1602.39130435,1620.19565217,1638.0,1655.80434783,1673.60869565,1691.41304348,1709.2173913,1727.02173913,1744.82608696,1762.63043478,1780.43478261,1798.23913043,1816.04347826,1833.84782609,1851.65217391,1869.45652174,1887.26086957,1905.06521739,1922.86956522,1940.67391304,1958.47826087,1976.2826087,1994.08695652,2011.89130435,2029.69565217,2047.5 };
const int Quantizer::hints55[] = { 0,23,46,69,92,115 };
// 56 | +e 24  |  24-equal or quarter tones
const float Quantizer::scale56[] = { 0.0,17.0625,34.125,51.1875,68.25,85.3125,102.375,119.4375,136.5,153.5625,170.625,187.6875,204.75,221.8125,238.875,255.9375,273.0,290.0625,307.125,324.1875,341.25,358.3125,375.375,392.4375,409.5,426.5625,443.625,460.6875,477.75,494.8125,511.875,528.9375,546.0,563.0625,580.125,597.1875,614.25,631.3125,648.375,665.4375,682.5,699.5625,716.625,733.6875,750.75,767.8125,784.875,801.9375,819.0,836.0625,853.125,870.1875,887.25,904.3125,921.375,938.4375,955.5,972.5625,989.625,1006.6875,1023.75,1040.8125,1057.875,1074.9375,1092.0,1109.0625,1126.125,1143.1875,1160.25,1177.3125,1194.375,1211.4375,1228.5,1245.5625,1262.625,1279.6875,1296.75,1313.8125,1330.875,1347.9375,1365.0,1382.0625,1399.125,1416.1875,1433.25,1450.3125,1467.375,1484.4375,1501.5,1518.5625,1535.625,1552.6875,1569.75,1586.8125,1603.875,1620.9375,1638.0,1655.0625,1672.125,1689.1875,1706.25,1723.3125,1740.375,1757.4375,1774.5,1791.5625,1808.625,1825.6875,1842.75,1859.8125,1876.875,1893.9375,1911.0,1928.0625,1945.125,1962.1875,1979.25,1996.3125,2013.375,2030.4375,2047.5 };
const int Quantizer::hints56[] = { 0,24,48,72,96,120 };
// 57 | +e 12 0 2 4 5 7 9 11  | major
const float Quantizer::scale57[] = { 0.0,68.25,136.5,170.625,238.875,307.125,375.375,409.5,477.75,546.0,580.125,648.375,716.625,784.875,819.0,887.25,955.5,989.625,1057.875,1126.125,1194.375,1228.5,1296.75,1365.0,1399.125,1467.375,1535.625,1603.875,1638.0,1706.25,1774.5,1808.625,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints57[] = { 0,7,14,21,28,35 };
// 58 | +e 12 0 2 3 5 7 8 10  | natural minor
const float Quantizer::scale58[] = { 0.0,68.25,102.375,170.625,238.875,273.0,341.25,409.5,477.75,511.875,580.125,648.375,682.5,750.75,819.0,887.25,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints58[] = { 0,7,14,21,28,35 };
// 59 | +e 12 0 2 3 5 7 8 11  | harmonic minor
const float Quantizer::scale59[] = { 0.0,68.25,102.375,170.625,238.875,273.0,375.375,409.5,477.75,511.875,580.125,648.375,682.5,784.875,819.0,887.25,921.375,989.625,1057.875,1092.0,1194.375,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1603.875,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,2013.375,2047.5 };
const int Quantizer::hints59[] = { 0,7,14,21,28,35 };
// 60 | +e 12 0 2 4 7 9   | major pentatonic
const float Quantizer::scale60[] = { 0.0,68.25,136.5,238.875,307.125,409.5,477.75,546.0,648.375,716.625,819.0,887.25,955.5,1057.875,1126.125,1228.5,1296.75,1365.0,1467.375,1535.625,1638.0,1706.25,1774.5,1876.875,1945.125,2047.5 };
const int Quantizer::hints60[] = { 0,5,10,15,20,25 };
// 61 | +e 12 0 3 5 7 10  | minor pentatonic
const float Quantizer::scale61[] = { 0.0,102.375,170.625,238.875,341.25,409.5,511.875,580.125,648.375,750.75,819.0,921.375,989.625,1057.875,1160.25,1228.5,1330.875,1399.125,1467.375,1569.75,1638.0,1740.375,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints61[] = { 0,5,10,15,20,25 };
// 62 | +e 12 0 3 5 6 7 10  | hexatonic blues
const float Quantizer::scale62[] = { 0.0,102.375,170.625,204.75,238.875,341.25,409.5,511.875,580.125,614.25,648.375,750.75,819.0,921.375,989.625,1023.75,1057.875,1160.25,1228.5,1330.875,1399.125,1433.25,1467.375,1569.75,1638.0,1740.375,1808.625,1842.75,1876.875,1979.25,2047.5 };
const int Quantizer::hints62[] = { 0,6,12,18,24,30 };
// 63 | +e 12 0 4 7  |  major triad
const float Quantizer::scale63[] = { 0.0,136.5,238.875,409.5,546.0,648.375,819.0,955.5,1057.875,1228.5,1365.0,1467.375,1638.0,1774.5,1876.875,2047.5 };
const int Quantizer::hints63[] = { 0,3,6,9,12,15 };
// 64 | +e 12 0 3 7  |  minor triad
const float Quantizer::scale64[] = { 0.0,102.375,238.875,409.5,511.875,648.375,819.0,921.375,1057.875,1228.5,1330.875,1467.375,1638.0,1740.375,1876.875,2047.5 };
const int Quantizer::hints64[] = { 0,3,6,9,12,15 };
// 65 | +e 12 0 4 7 10  |  dominant seventh
const float Quantizer::scale65[] = { 0.0,136.5,238.875,341.25,409.5,546.0,648.375,750.75,819.0,955.5,1057.875,1160.25,1228.5,1365.0,1467.375,1569.75,1638.0,1774.5,1876.875,1979.25,2047.5 };
const int Quantizer::hints65[] = { 0,4,8,12,16,20 };

const int Quantizer::notecount[] = { 61,36,61,36,66,216,26,36,61,86,26,36,61,96,156,26,36,61,96,26,36,61,61,61,61,61,61,61,61,61,61,61,61,61,6,11,16,21,26,31,36,41,46,51,56,66,71,76,81,86,91,96,101,106,111,116,121,36,36,36,26,26,31,16,16,21 };

const float *Quantizer::scales[] = { scale0,scale1,scale2,scale3,scale4,scale5,scale6,scale7,scale8,scale9,scale10,scale11,scale12,scale13,scale14,scale15,scale16,scale17,scale18,scale19,scale20,scale21,scale22,scale23,scale24,scale25,scale26,scale27,scale28,scale29,scale30,scale31,scale32,scale33,scale34,scale35,scale36,scale37,scale38,scale39,scale40,scale41,scale42,scale43,scale44,scale45,scale46,scale47,scale48,scale49,scale50,scale51,scale52,scale53,scale54,scale55,scale56,scale57,scale58,scale59,scale60,scale61,scale62,scale63,scale64,scale65 };
const int *Quantizer::hints[] = { hints0,hints1,hints2,hints3,hints4,hints5,hints6,hints7,hints8,hints9,hints10,hints11,hints12,hints13,hints14,hints15,hints16,hints17,hints18,hints19,hints20,hints21,hints22,hints23,hints24,hints25,hints26,hints27,hints28,hints29,hints30,hints31,hints32,hints33,hints34,hints35,hints36,hints37,hints38,hints39,hints40,hints41,hints42,hints43,hints44,hints45,hints46,hints47,hints48,hints49,hints50,hints51,hints52,hints53,hints54,hints55,hints56,hints57,hints58,hints59,hints60,hints61,hints62,hints63,hints64,hints65 };


const int Quantizer::bankandscale[6][12] = {
  {   0,  57,  58,  59,  60,  61,  62,  39,  63,  64,  65,  37 }, //  1  Top Twelve
  {   1,   2,   3,   4,   5,  -1,  -1,  -1,   6,   7,   8,   9 }, //  2  Just/Pythagorean
  {  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21 }, //  3  Meantone
  {  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33 }, //  4  Well temperaments
  {  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,   0 }, //  5  Macrotonal (and 12-note) equal divisions
  {  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56 }  //  6  Microtonal equal divisions
};
#endif
// END AUTOGENERATED SCALE CLASS DATA

