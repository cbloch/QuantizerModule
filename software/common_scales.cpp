// 0 | +e 12  |  12-equal chromatic
const float Quantizer::scale0[] = { 0.0,34.125,68.25,102.375,136.5,170.625,204.75,238.875,273.0,307.125,341.25,375.375,409.5,443.625,477.75,511.875,546.0,580.125,614.25,648.375,682.5,716.625,750.75,784.875,819.0,853.125,887.25,921.375,955.5,989.625,1023.75,1057.875,1092.0,1126.125,1160.25,1194.375,1228.5,1262.625,1296.75,1330.875,1365.0,1399.125,1433.25,1467.375,1501.5,1535.625,1569.75,1603.875,1638.0,1672.125,1706.25,1740.375,1774.5,1808.625,1842.75,1876.875,1911.0,1945.125,1979.25,2013.375,2047.5 };
const int Quantizer::hints0[] = { 0,12,24,36,48,60 };
// 1 | +e 12 0 2 4 5 7 9 11  | major
const float Quantizer::scale1[] = { 0.0,68.25,136.5,170.625,238.875,307.125,375.375,409.5,477.75,546.0,580.125,648.375,716.625,784.875,819.0,887.25,955.5,989.625,1057.875,1126.125,1194.375,1228.5,1296.75,1365.0,1399.125,1467.375,1535.625,1603.875,1638.0,1706.25,1774.5,1808.625,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints1[] = { 0,7,14,21,28,35 };
// 2 | +e 12 0 2 3 5 7 8 10  | natural minor
const float Quantizer::scale2[] = { 0.0,68.25,102.375,170.625,238.875,273.0,341.25,409.5,477.75,511.875,580.125,648.375,682.5,750.75,819.0,887.25,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints2[] = { 0,7,14,21,28,35 };
// 3 | +e 12 0 2 3 5 7 8 11  | harmonic minor
const float Quantizer::scale3[] = { 0.0,68.25,102.375,170.625,238.875,273.0,375.375,409.5,477.75,511.875,580.125,648.375,682.5,784.875,819.0,887.25,921.375,989.625,1057.875,1092.0,1194.375,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1603.875,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,2013.375,2047.5 };
const int Quantizer::hints3[] = { 0,7,14,21,28,35 };
// 4 | +e 12 0 2 4 7 9   | major pentatonic
const float Quantizer::scale4[] = { 0.0,68.25,136.5,238.875,307.125,409.5,477.75,546.0,648.375,716.625,819.0,887.25,955.5,1057.875,1126.125,1228.5,1296.75,1365.0,1467.375,1535.625,1638.0,1706.25,1774.5,1876.875,1945.125,2047.5 };
const int Quantizer::hints4[] = { 0,5,10,15,20,25 };
// 5 | +e 12 0 3 5 7 10  | minor pentatonic
const float Quantizer::scale5[] = { 0.0,102.375,170.625,238.875,341.25,409.5,511.875,580.125,648.375,750.75,819.0,921.375,989.625,1057.875,1160.25,1228.5,1330.875,1399.125,1467.375,1569.75,1638.0,1740.375,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints5[] = { 0,5,10,15,20,25 };
// 6 | +e 12 0 3 5 6 7 10  | hexatonic blues
const float Quantizer::scale6[] = { 0.0,102.375,170.625,204.75,238.875,341.25,409.5,511.875,580.125,614.25,648.375,750.75,819.0,921.375,989.625,1023.75,1057.875,1160.25,1228.5,1330.875,1399.125,1433.25,1467.375,1569.75,1638.0,1740.375,1808.625,1842.75,1876.875,1979.25,2047.5 };
const int Quantizer::hints6[] = { 0,6,12,18,24,30 };
// 7 | +e 6  |  6-equal or whole tones
const float Quantizer::scale7[] = { 0.0,68.25,136.5,204.75,273.0,341.25,409.5,477.75,546.0,614.25,682.5,750.75,819.0,887.25,955.5,1023.75,1092.0,1160.25,1228.5,1296.75,1365.0,1433.25,1501.5,1569.75,1638.0,1706.25,1774.5,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints7[] = { 0,6,12,18,24,30 };
// 8 | +e 12 0 4 7  |  major triad
const float Quantizer::scale8[] = { 0.0,136.5,238.875,409.5,546.0,648.375,819.0,955.5,1057.875,1228.5,1365.0,1467.375,1638.0,1774.5,1876.875,2047.5 };
const int Quantizer::hints8[] = { 0,3,6,9,12,15 };
// 9 | +e 12 0 3 7  |  minor triad
const float Quantizer::scale9[] = { 0.0,102.375,238.875,409.5,511.875,648.375,819.0,921.375,1057.875,1228.5,1330.875,1467.375,1638.0,1740.375,1876.875,2047.5 };
const int Quantizer::hints9[] = { 0,3,6,9,12,15 };
// 10 | +e 12 0 4 7 10  |  dominant seventh
const float Quantizer::scale10[] = { 0.0,136.5,238.875,341.25,409.5,546.0,648.375,750.75,819.0,955.5,1057.875,1160.25,1228.5,1365.0,1467.375,1569.75,1638.0,1774.5,1876.875,1979.25,2047.5 };
const int Quantizer::hints10[] = { 0,4,8,12,16,20 };
// 11 | +e 12 0 3 6 9  |  diminished seventh
const float Quantizer::scale11[] = { 0.0,102.375,204.75,307.125,409.5,511.875,614.25,716.625,819.0,921.375,1023.75,1126.125,1228.5,1330.875,1433.25,1535.625,1638.0,1740.375,1842.75,1945.125,2047.5 };
const int Quantizer::hints11[] = { 0,4,8,12,16,20 };
// 12 | +e 12  1  3  5  6  8 10  0   | C# major / Bb natural minor
const float Quantizer::scale12[] = { 0.0,34.125,102.375,170.625,204.75,273.0,341.25,409.5,443.625,511.875,580.125,614.25,682.5,750.75,819.0,853.125,921.375,989.625,1023.75,1092.0,1160.25,1228.5,1262.625,1330.875,1399.125,1433.25,1501.5,1569.75,1638.0,1672.125,1740.375,1808.625,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints12[] = { 0,7,14,21,28,35 };
// 13 | +e 12  2  4  6  7  9 11  1   | D  major / B  natural minor
const float Quantizer::scale13[] = { -34.125,34.125,68.25,136.5,204.75,238.875,307.125,375.375,443.625,477.75,546.0,614.25,648.375,716.625,784.875,853.125,887.25,955.5,1023.75,1057.875,1126.125,1194.375,1262.625,1296.75,1365.0,1433.25,1467.375,1535.625,1603.875,1672.125,1706.25,1774.5,1842.75,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints13[] = { 0,8,15,22,29,36 };
// 14 | +e 12  3  5  7  8 10  0  2   | Eb major / C  natural minor
const float Quantizer::scale14[] = { 0.0,68.25,102.375,170.625,238.875,273.0,341.25,409.5,477.75,511.875,580.125,648.375,682.5,750.75,819.0,887.25,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints14[] = { 0,7,14,21,28,35 };
// 15 | +e 12  4  6  8  9 11  1  3   | E  major / C# natural minor
const float Quantizer::scale15[] = { -34.125,34.125,102.375,136.5,204.75,273.0,307.125,375.375,443.625,511.875,546.0,614.25,682.5,716.625,784.875,853.125,921.375,955.5,1023.75,1092.0,1126.125,1194.375,1262.625,1330.875,1365.0,1433.25,1501.5,1535.625,1603.875,1672.125,1740.375,1774.5,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints15[] = { 0,8,15,22,29,36 };
// 16 | +e 12  5  7  9 10  0  2  4   | F  major / D  natural minor
const float Quantizer::scale16[] = { 0.0,68.25,136.5,170.625,238.875,307.125,341.25,409.5,477.75,546.0,580.125,648.375,716.625,750.75,819.0,887.25,955.5,989.625,1057.875,1126.125,1160.25,1228.5,1296.75,1365.0,1399.125,1467.375,1535.625,1569.75,1638.0,1706.25,1774.5,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints16[] = { 0,7,14,21,28,35 };
// 17 | +e 12  6  8 10 11  1  3  5   | F# major / Eb natural minor
const float Quantizer::scale17[] = { -34.125,34.125,102.375,170.625,204.75,273.0,341.25,375.375,443.625,511.875,580.125,614.25,682.5,750.75,784.875,853.125,921.375,989.625,1023.75,1092.0,1160.25,1194.375,1262.625,1330.875,1399.125,1433.25,1501.5,1569.75,1603.875,1672.125,1740.375,1808.625,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints17[] = { 0,8,15,22,29,36 };
// 18 | +e 12  7  9 11  0  2  4  6   | G  major / E  natural minor
const float Quantizer::scale18[] = { 0.0,68.25,136.5,204.75,238.875,307.125,375.375,409.5,477.75,546.0,614.25,648.375,716.625,784.875,819.0,887.25,955.5,1023.75,1057.875,1126.125,1194.375,1228.5,1296.75,1365.0,1433.25,1467.375,1535.625,1603.875,1638.0,1706.25,1774.5,1842.75,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints18[] = { 0,7,14,21,28,35 };
// 19 | +e 12  8 10  0  1  3  5  7   | G# major / F  natural minor
const float Quantizer::scale19[] = { 0.0,34.125,102.375,170.625,238.875,273.0,341.25,409.5,443.625,511.875,580.125,648.375,682.5,750.75,819.0,853.125,921.375,989.625,1057.875,1092.0,1160.25,1228.5,1262.625,1330.875,1399.125,1467.375,1501.5,1569.75,1638.0,1672.125,1740.375,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints19[] = { 0,7,14,21,28,35 };
// 20 | +e 12  9 11  1  2  4  6  8   | A  major / F# natural minor
const float Quantizer::scale20[] = { -34.125,34.125,68.25,136.5,204.75,273.0,307.125,375.375,443.625,477.75,546.0,614.25,682.5,716.625,784.875,853.125,887.25,955.5,1023.75,1092.0,1126.125,1194.375,1262.625,1296.75,1365.0,1433.25,1501.5,1535.625,1603.875,1672.125,1706.25,1774.5,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints20[] = { 0,8,15,22,29,36 };
// 21 | +e 12 10  0  2  3  5  7  9   | Bb major / G  natural minor
const float Quantizer::scale21[] = { 0.0,68.25,102.375,170.625,238.875,307.125,341.25,409.5,477.75,511.875,580.125,648.375,716.625,750.75,819.0,887.25,921.375,989.625,1057.875,1126.125,1160.25,1228.5,1296.75,1330.875,1399.125,1467.375,1535.625,1569.75,1638.0,1706.25,1740.375,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints21[] = { 0,7,14,21,28,35 };
// 22 | +e 12 11  1  3  4  6  8 10   | B  major / G# natural minor
const float Quantizer::scale22[] = { -34.125,34.125,102.375,136.5,204.75,273.0,341.25,375.375,443.625,511.875,546.0,614.25,682.5,750.75,784.875,853.125,921.375,955.5,1023.75,1092.0,1160.25,1194.375,1262.625,1330.875,1365.0,1433.25,1501.5,1569.75,1603.875,1672.125,1740.375,1774.5,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints22[] = { 0,8,15,22,29,36 };
// 23 | +e 12  1  3  4  6  8  9  0   | C# harmonic minor
const float Quantizer::scale23[] = { 0.0,34.125,102.375,136.5,204.75,273.0,307.125,409.5,443.625,511.875,546.0,614.25,682.5,716.625,819.0,853.125,921.375,955.5,1023.75,1092.0,1126.125,1228.5,1262.625,1330.875,1365.0,1433.25,1501.5,1535.625,1638.0,1672.125,1740.375,1774.5,1842.75,1911.0,1945.125,2047.5 };
const int Quantizer::hints23[] = { 0,7,14,21,28,35 };
// 24 | +e 12  2  4  5  7  9 10  1   | D  harmonic minor
const float Quantizer::scale24[] = { -68.25,34.125,68.25,136.5,170.625,238.875,307.125,341.25,443.625,477.75,546.0,580.125,648.375,716.625,750.75,853.125,887.25,955.5,989.625,1057.875,1126.125,1160.25,1262.625,1296.75,1365.0,1399.125,1467.375,1535.625,1569.75,1672.125,1706.25,1774.5,1808.625,1876.875,1945.125,1979.25,2081.625 };
const int Quantizer::hints24[] = { 0,8,15,22,29,36 };
// 25 | +e 12  3  5  6  8 10 11  2   | Eb harmonic minor
const float Quantizer::scale25[] = { -34.125,68.25,102.375,170.625,204.75,273.0,341.25,375.375,477.75,511.875,580.125,614.25,682.5,750.75,784.875,887.25,921.375,989.625,1023.75,1092.0,1160.25,1194.375,1296.75,1330.875,1399.125,1433.25,1501.5,1569.75,1603.875,1706.25,1740.375,1808.625,1842.75,1911.0,1979.25,2013.375,2115.75 };
const int Quantizer::hints25[] = { 0,8,15,22,29,36 };
// 26 | +e 12  4  6  7  9 11  0  3   | E  harmonic minor
const float Quantizer::scale26[] = { 0.0,102.375,136.5,204.75,238.875,307.125,375.375,409.5,511.875,546.0,614.25,648.375,716.625,784.875,819.0,921.375,955.5,1023.75,1057.875,1126.125,1194.375,1228.5,1330.875,1365.0,1433.25,1467.375,1535.625,1603.875,1638.0,1740.375,1774.5,1842.75,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints26[] = { 0,7,14,21,28,35 };
// 27 | +e 12  5  7  8 10  0  1  4   | F  harmonic minor
const float Quantizer::scale27[] = { 0.0,34.125,136.5,170.625,238.875,273.0,341.25,409.5,443.625,546.0,580.125,648.375,682.5,750.75,819.0,853.125,955.5,989.625,1057.875,1092.0,1160.25,1228.5,1262.625,1365.0,1399.125,1467.375,1501.5,1569.75,1638.0,1672.125,1774.5,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints27[] = { 0,7,14,21,28,35 };
// 28 | +e 12  6  8  9 11  1  2  5   | F# harmonic minor
const float Quantizer::scale28[] = { -34.125,34.125,68.25,170.625,204.75,273.0,307.125,375.375,443.625,477.75,580.125,614.25,682.5,716.625,784.875,853.125,887.25,989.625,1023.75,1092.0,1126.125,1194.375,1262.625,1296.75,1399.125,1433.25,1501.5,1535.625,1603.875,1672.125,1706.25,1808.625,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints28[] = { 0,8,15,22,29,36 };
// 29 | +e 12  7  9 10  0  2  3  6   | G  harmonic minor
const float Quantizer::scale29[] = { 0.0,68.25,102.375,204.75,238.875,307.125,341.25,409.5,477.75,511.875,614.25,648.375,716.625,750.75,819.0,887.25,921.375,1023.75,1057.875,1126.125,1160.25,1228.5,1296.75,1330.875,1433.25,1467.375,1535.625,1569.75,1638.0,1706.25,1740.375,1842.75,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints29[] = { 0,7,14,21,28,35 };
// 30 | +e 12  8 10 11  1  3  4  7   | G# harmonic minor
const float Quantizer::scale30[] = { -34.125,34.125,102.375,136.5,238.875,273.0,341.25,375.375,443.625,511.875,546.0,648.375,682.5,750.75,784.875,853.125,921.375,955.5,1057.875,1092.0,1160.25,1194.375,1262.625,1330.875,1365.0,1467.375,1501.5,1569.75,1603.875,1672.125,1740.375,1774.5,1876.875,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints30[] = { 0,8,15,22,29,36 };
// 31 | +e 12  9 11  0  2  4  5  8   | A  harmonic minor
const float Quantizer::scale31[] = { 0.0,68.25,136.5,170.625,273.0,307.125,375.375,409.5,477.75,546.0,580.125,682.5,716.625,784.875,819.0,887.25,955.5,989.625,1092.0,1126.125,1194.375,1228.5,1296.75,1365.0,1399.125,1501.5,1535.625,1603.875,1638.0,1706.25,1774.5,1808.625,1911.0,1945.125,2013.375,2047.5 };
const int Quantizer::hints31[] = { 0,7,14,21,28,35 };
// 32 | +e 12 10  0  1  3  5  6  9   | Bb harmonic minor
const float Quantizer::scale32[] = { 0.0,34.125,102.375,170.625,204.75,307.125,341.25,409.5,443.625,511.875,580.125,614.25,716.625,750.75,819.0,853.125,921.375,989.625,1023.75,1126.125,1160.25,1228.5,1262.625,1330.875,1399.125,1433.25,1535.625,1569.75,1638.0,1672.125,1740.375,1808.625,1842.75,1945.125,1979.25,2047.5 };
const int Quantizer::hints32[] = { 0,7,14,21,28,35 };
// 33 | +e 12 11  1  2  4  6  7 10   | B  harmonic minor
const float Quantizer::scale33[] = { -34.125,34.125,68.25,136.5,204.75,238.875,341.25,375.375,443.625,477.75,546.0,614.25,648.375,750.75,784.875,853.125,887.25,955.5,1023.75,1057.875,1160.25,1194.375,1262.625,1296.75,1365.0,1433.25,1467.375,1569.75,1603.875,1672.125,1706.25,1774.5,1842.75,1876.875,1979.25,2013.375,2081.625 };
const int Quantizer::hints33[] = { 0,8,15,22,29,36 };
// 34 | +e 12  0  2  3  5  7  9 11   | C  melodic minor
const float Quantizer::scale34[] = { 0.0,68.25,102.375,170.625,238.875,307.125,375.375,409.5,477.75,511.875,580.125,648.375,716.625,784.875,819.0,887.25,921.375,989.625,1057.875,1126.125,1194.375,1228.5,1296.75,1330.875,1399.125,1467.375,1535.625,1603.875,1638.0,1706.25,1740.375,1808.625,1876.875,1945.125,2013.375,2047.5 };
const int Quantizer::hints34[] = { 0,7,14,21,28,35 };
// 35 | +e 12  1  3  4  6  8 10  0   | C# melodic minor
const float Quantizer::scale35[] = { 0.0,34.125,102.375,136.5,204.75,273.0,341.25,409.5,443.625,511.875,546.0,614.25,682.5,750.75,819.0,853.125,921.375,955.5,1023.75,1092.0,1160.25,1228.5,1262.625,1330.875,1365.0,1433.25,1501.5,1569.75,1638.0,1672.125,1740.375,1774.5,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints35[] = { 0,7,14,21,28,35 };
// 36 | +e 12  2  4  5  7  9 11  1   | D  melodic minor
const float Quantizer::scale36[] = { -34.125,34.125,68.25,136.5,170.625,238.875,307.125,375.375,443.625,477.75,546.0,580.125,648.375,716.625,784.875,853.125,887.25,955.5,989.625,1057.875,1126.125,1194.375,1262.625,1296.75,1365.0,1399.125,1467.375,1535.625,1603.875,1672.125,1706.25,1774.5,1808.625,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints36[] = { 0,8,15,22,29,36 };
// 37 | +e 12  3  5  6  8 10  0  2   | Eb melodic minor
const float Quantizer::scale37[] = { 0.0,68.25,102.375,170.625,204.75,273.0,341.25,409.5,477.75,511.875,580.125,614.25,682.5,750.75,819.0,887.25,921.375,989.625,1023.75,1092.0,1160.25,1228.5,1296.75,1330.875,1399.125,1433.25,1501.5,1569.75,1638.0,1706.25,1740.375,1808.625,1842.75,1911.0,1979.25,2047.5 };
const int Quantizer::hints37[] = { 0,7,14,21,28,35 };
// 38 | +e 12  4  6  7  9 11  1  3   | E  melodic minor
const float Quantizer::scale38[] = { -34.125,34.125,102.375,136.5,204.75,238.875,307.125,375.375,443.625,511.875,546.0,614.25,648.375,716.625,784.875,853.125,921.375,955.5,1023.75,1057.875,1126.125,1194.375,1262.625,1330.875,1365.0,1433.25,1467.375,1535.625,1603.875,1672.125,1740.375,1774.5,1842.75,1876.875,1945.125,2013.375,2081.625 };
const int Quantizer::hints38[] = { 0,8,15,22,29,36 };
// 39 | +e 12  5  7  8 10  0  2  4   | F  melodic minor
const float Quantizer::scale39[] = { 0.0,68.25,136.5,170.625,238.875,273.0,341.25,409.5,477.75,546.0,580.125,648.375,682.5,750.75,819.0,887.25,955.5,989.625,1057.875,1092.0,1160.25,1228.5,1296.75,1365.0,1399.125,1467.375,1501.5,1569.75,1638.0,1706.25,1774.5,1808.625,1876.875,1911.0,1979.25,2047.5 };
const int Quantizer::hints39[] = { 0,7,14,21,28,35 };
// 40 | +e 12  6  8  9 11  1  3  5   | F# melodic minor
const float Quantizer::scale40[] = { -34.125,34.125,102.375,170.625,204.75,273.0,307.125,375.375,443.625,511.875,580.125,614.25,682.5,716.625,784.875,853.125,921.375,989.625,1023.75,1092.0,1126.125,1194.375,1262.625,1330.875,1399.125,1433.25,1501.5,1535.625,1603.875,1672.125,1740.375,1808.625,1842.75,1911.0,1945.125,2013.375,2081.625 };
const int Quantizer::hints40[] = { 0,8,15,22,29,36 };
// 41 | +e 12  7  9 10  0  2  4  6   | G  melodic minor
const float Quantizer::scale41[] = { 0.0,68.25,136.5,204.75,238.875,307.125,341.25,409.5,477.75,546.0,614.25,648.375,716.625,750.75,819.0,887.25,955.5,1023.75,1057.875,1126.125,1160.25,1228.5,1296.75,1365.0,1433.25,1467.375,1535.625,1569.75,1638.0,1706.25,1774.5,1842.75,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints41[] = { 0,7,14,21,28,35 };
// 42 | +e 12  8 10 11  1  3  5  7   | G# melodic minor
const float Quantizer::scale42[] = { -34.125,34.125,102.375,170.625,238.875,273.0,341.25,375.375,443.625,511.875,580.125,648.375,682.5,750.75,784.875,853.125,921.375,989.625,1057.875,1092.0,1160.25,1194.375,1262.625,1330.875,1399.125,1467.375,1501.5,1569.75,1603.875,1672.125,1740.375,1808.625,1876.875,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints42[] = { 0,8,15,22,29,36 };
// 43 | +e 12  9 11  0  2  4  6  8   | A  melodic minor
const float Quantizer::scale43[] = { 0.0,68.25,136.5,204.75,273.0,307.125,375.375,409.5,477.75,546.0,614.25,682.5,716.625,784.875,819.0,887.25,955.5,1023.75,1092.0,1126.125,1194.375,1228.5,1296.75,1365.0,1433.25,1501.5,1535.625,1603.875,1638.0,1706.25,1774.5,1842.75,1911.0,1945.125,2013.375,2047.5 };
const int Quantizer::hints43[] = { 0,7,14,21,28,35 };
// 44 | +e 12 10  0  1  3  5  7  9   | Bb melodic minor
const float Quantizer::scale44[] = { 0.0,34.125,102.375,170.625,238.875,307.125,341.25,409.5,443.625,511.875,580.125,648.375,716.625,750.75,819.0,853.125,921.375,989.625,1057.875,1126.125,1160.25,1228.5,1262.625,1330.875,1399.125,1467.375,1535.625,1569.75,1638.0,1672.125,1740.375,1808.625,1876.875,1945.125,1979.25,2047.5 };
const int Quantizer::hints44[] = { 0,7,14,21,28,35 };
// 45 | +e 12 11  1  2  4  6  8 10   | B  melodic minor
const float Quantizer::scale45[] = { -34.125,34.125,68.25,136.5,204.75,273.0,341.25,375.375,443.625,477.75,546.0,614.25,682.5,750.75,784.875,853.125,887.25,955.5,1023.75,1092.0,1160.25,1194.375,1262.625,1296.75,1365.0,1433.25,1501.5,1569.75,1603.875,1672.125,1706.25,1774.5,1842.75,1911.0,1979.25,2013.375,2081.625 };
const int Quantizer::hints45[] = { 0,8,15,22,29,36 };
// 46 | +e 12  1  3  5  8 10   | C# major / Bb minor pentatonic
const float Quantizer::scale46[] = { -68.25,34.125,102.375,170.625,273.0,341.25,443.625,511.875,580.125,682.5,750.75,853.125,921.375,989.625,1092.0,1160.25,1262.625,1330.875,1399.125,1501.5,1569.75,1672.125,1740.375,1808.625,1911.0,1979.25,2081.625 };
const int Quantizer::hints46[] = { 0,6,11,16,21,26 };
// 47 | +e 12  2  4  6  9 11   | D  major / B  minor pentatonic
const float Quantizer::scale47[] = { -34.125,68.25,136.5,204.75,307.125,375.375,477.75,546.0,614.25,716.625,784.875,887.25,955.5,1023.75,1126.125,1194.375,1296.75,1365.0,1433.25,1535.625,1603.875,1706.25,1774.5,1842.75,1945.125,2013.375,2115.75 };
const int Quantizer::hints47[] = { 0,6,11,16,21,26 };
// 48 | +e 12  3  5  7 10  0   | Eb major / C  minor pentatonic
const float Quantizer::scale48[] = { 0.0,102.375,170.625,238.875,341.25,409.5,511.875,580.125,648.375,750.75,819.0,921.375,989.625,1057.875,1160.25,1228.5,1330.875,1399.125,1467.375,1569.75,1638.0,1740.375,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints48[] = { 0,5,10,15,20,25 };
// 49 | +e 12  4  6  8 11  1   | E  major / C# minor pentatonic
const float Quantizer::scale49[] = { -34.125,34.125,136.5,204.75,273.0,375.375,443.625,546.0,614.25,682.5,784.875,853.125,955.5,1023.75,1092.0,1194.375,1262.625,1365.0,1433.25,1501.5,1603.875,1672.125,1774.5,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints49[] = { 0,6,11,16,21,26 };
// 50 | +e 12  5  7  9  0  2   | F  major / D  minor pentatonic
const float Quantizer::scale50[] = { 0.0,68.25,170.625,238.875,307.125,409.5,477.75,580.125,648.375,716.625,819.0,887.25,989.625,1057.875,1126.125,1228.5,1296.75,1399.125,1467.375,1535.625,1638.0,1706.25,1808.625,1876.875,1945.125,2047.5 };
const int Quantizer::hints50[] = { 0,5,10,15,20,25 };
// 51 | +e 12  6  8 10  1  3   | F# major / Eb minor pentatonic
const float Quantizer::scale51[] = { -68.25,34.125,102.375,204.75,273.0,341.25,443.625,511.875,614.25,682.5,750.75,853.125,921.375,1023.75,1092.0,1160.25,1262.625,1330.875,1433.25,1501.5,1569.75,1672.125,1740.375,1842.75,1911.0,1979.25,2081.625 };
const int Quantizer::hints51[] = { 0,6,11,16,21,26 };
// 52 | +e 12  7  9 11  2  4   | G  major / E  minor pentatonic
const float Quantizer::scale52[] = { -34.125,68.25,136.5,238.875,307.125,375.375,477.75,546.0,648.375,716.625,784.875,887.25,955.5,1057.875,1126.125,1194.375,1296.75,1365.0,1467.375,1535.625,1603.875,1706.25,1774.5,1876.875,1945.125,2013.375,2115.75 };
const int Quantizer::hints52[] = { 0,6,11,16,21,26 };
// 53 | +e 12  8 10  0  3  5   | G# major / F  minor pentatonic
const float Quantizer::scale53[] = { 0.0,102.375,170.625,273.0,341.25,409.5,511.875,580.125,682.5,750.75,819.0,921.375,989.625,1092.0,1160.25,1228.5,1330.875,1399.125,1501.5,1569.75,1638.0,1740.375,1808.625,1911.0,1979.25,2047.5 };
const int Quantizer::hints53[] = { 0,5,10,15,20,25 };
// 54 | +e 12  9 11  1  4  6   | A  major / F# minor pentatonic
const float Quantizer::scale54[] = { -34.125,34.125,136.5,204.75,307.125,375.375,443.625,546.0,614.25,716.625,784.875,853.125,955.5,1023.75,1126.125,1194.375,1262.625,1365.0,1433.25,1535.625,1603.875,1672.125,1774.5,1842.75,1945.125,2013.375,2081.625 };
const int Quantizer::hints54[] = { 0,6,11,16,21,26 };
// 55 | +e 12 10  0  2  5  7   | Bb major / G  minor pentatonic
const float Quantizer::scale55[] = { 0.0,68.25,170.625,238.875,341.25,409.5,477.75,580.125,648.375,750.75,819.0,887.25,989.625,1057.875,1160.25,1228.5,1296.75,1399.125,1467.375,1569.75,1638.0,1706.25,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints55[] = { 0,5,10,15,20,25 };
// 56 | +e 12 11  1  3  6  8   | B  major / G# minor pentatonic
const float Quantizer::scale56[] = { -34.125,34.125,102.375,204.75,273.0,375.375,443.625,511.875,614.25,682.5,784.875,853.125,921.375,1023.75,1092.0,1194.375,1262.625,1330.875,1433.25,1501.5,1603.875,1672.125,1740.375,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints56[] = { 0,6,11,16,21,26 };
// 57 | +e 12  1  4  6  7  8 11   | C# blues
const float Quantizer::scale57[] = { -34.125,34.125,136.5,204.75,238.875,273.0,375.375,443.625,546.0,614.25,648.375,682.5,784.875,853.125,955.5,1023.75,1057.875,1092.0,1194.375,1262.625,1365.0,1433.25,1467.375,1501.5,1603.875,1672.125,1774.5,1842.75,1876.875,1911.0,2013.375,2081.625 };
const int Quantizer::hints57[] = { 0,7,13,19,25,31 };
// 58 | +e 12  2  5  7  8  9  0   | D  blues
const float Quantizer::scale58[] = { 0.0,68.25,170.625,238.875,273.0,307.125,409.5,477.75,580.125,648.375,682.5,716.625,819.0,887.25,989.625,1057.875,1092.0,1126.125,1228.5,1296.75,1399.125,1467.375,1501.5,1535.625,1638.0,1706.25,1808.625,1876.875,1911.0,1945.125,2047.5 };
const int Quantizer::hints58[] = { 0,6,12,18,24,30 };
// 59 | +e 12  3  6  8  9 10  1   | Eb blues
const float Quantizer::scale59[] = { -68.25,34.125,102.375,204.75,273.0,307.125,341.25,443.625,511.875,614.25,682.5,716.625,750.75,853.125,921.375,1023.75,1092.0,1126.125,1160.25,1262.625,1330.875,1433.25,1501.5,1535.625,1569.75,1672.125,1740.375,1842.75,1911.0,1945.125,1979.25,2081.625 };
const int Quantizer::hints59[] = { 0,7,13,19,25,31 };
// 60 | +e 12  4  7  9 10 11  2   | E  blues
const float Quantizer::scale60[] = { -34.125,68.25,136.5,238.875,307.125,341.25,375.375,477.75,546.0,648.375,716.625,750.75,784.875,887.25,955.5,1057.875,1126.125,1160.25,1194.375,1296.75,1365.0,1467.375,1535.625,1569.75,1603.875,1706.25,1774.5,1876.875,1945.125,1979.25,2013.375,2115.75 };
const int Quantizer::hints60[] = { 0,7,13,19,25,31 };
// 61 | +e 12  5  8 10 11  0  3   | F  blues
const float Quantizer::scale61[] = { 0.0,102.375,170.625,273.0,341.25,375.375,409.5,511.875,580.125,682.5,750.75,784.875,819.0,921.375,989.625,1092.0,1160.25,1194.375,1228.5,1330.875,1399.125,1501.5,1569.75,1603.875,1638.0,1740.375,1808.625,1911.0,1979.25,2013.375,2047.5 };
const int Quantizer::hints61[] = { 0,6,12,18,24,30 };
// 62 | +e 12  6  9 11  0  1  4   | F# blues
const float Quantizer::scale62[] = { 0.0,34.125,136.5,204.75,307.125,375.375,409.5,443.625,546.0,614.25,716.625,784.875,819.0,853.125,955.5,1023.75,1126.125,1194.375,1228.5,1262.625,1365.0,1433.25,1535.625,1603.875,1638.0,1672.125,1774.5,1842.75,1945.125,2013.375,2047.5 };
const int Quantizer::hints62[] = { 0,6,12,18,24,30 };
// 63 | +e 12  7 10  0  1  2  5   | G  blues
const float Quantizer::scale63[] = { 0.0,34.125,68.25,170.625,238.875,341.25,409.5,443.625,477.75,580.125,648.375,750.75,819.0,853.125,887.25,989.625,1057.875,1160.25,1228.5,1262.625,1296.75,1399.125,1467.375,1569.75,1638.0,1672.125,1706.25,1808.625,1876.875,1979.25,2047.5 };
const int Quantizer::hints63[] = { 0,6,12,18,24,30 };
// 64 | +e 12  8 11  1  2  3  6   | G# blues
const float Quantizer::scale64[] = { -34.125,34.125,68.25,102.375,204.75,273.0,375.375,443.625,477.75,511.875,614.25,682.5,784.875,853.125,887.25,921.375,1023.75,1092.0,1194.375,1262.625,1296.75,1330.875,1433.25,1501.5,1603.875,1672.125,1706.25,1740.375,1842.75,1911.0,2013.375,2081.625 };
const int Quantizer::hints64[] = { 0,7,13,19,25,31 };
// 65 | +e 12  9  0  2  3  4  7   | A  blues
const float Quantizer::scale65[] = { 0.0,68.25,102.375,136.5,238.875,307.125,409.5,477.75,511.875,546.0,648.375,716.625,819.0,887.25,921.375,955.5,1057.875,1126.125,1228.5,1296.75,1330.875,1365.0,1467.375,1535.625,1638.0,1706.25,1740.375,1774.5,1876.875,1945.125,2047.5 };
const int Quantizer::hints65[] = { 0,6,12,18,24,30 };
// 66 | +e 12 10  1  3  4  5  8   | Bb blues
const float Quantizer::scale66[] = { -68.25,34.125,102.375,136.5,170.625,273.0,341.25,443.625,511.875,546.0,580.125,682.5,750.75,853.125,921.375,955.5,989.625,1092.0,1160.25,1262.625,1330.875,1365.0,1399.125,1501.5,1569.75,1672.125,1740.375,1774.5,1808.625,1911.0,1979.25,2081.625 };
const int Quantizer::hints66[] = { 0,7,13,19,25,31 };
// 67 | +e 12 11  2  4  5  6  9   | B  blues
const float Quantizer::scale67[] = { -34.125,68.25,136.5,170.625,204.75,307.125,375.375,477.75,546.0,580.125,614.25,716.625,784.875,887.25,955.5,989.625,1023.75,1126.125,1194.375,1296.75,1365.0,1399.125,1433.25,1535.625,1603.875,1706.25,1774.5,1808.625,1842.75,1945.125,2013.375,2115.75 };
const int Quantizer::hints67[] = { 0,7,13,19,25,31 };

const int Quantizer::notecount[] = { 61,36,36,36,26,26,31,31,16,16,21,21,36,37,36,37,36,37,36,36,37,36,37,36,37,37,36,36,37,36,37,36,36,37,36,36,37,36,37,36,37,36,37,36,36,37,27,27,26,27,26,27,27,26,27,26,27,32,31,32,32,31,31,31,32,31,32,32 };

const float *Quantizer::scales[] = { scale0,scale1,scale2,scale3,scale4,scale5,scale6,scale7,scale8,scale9,scale10,scale11,scale12,scale13,scale14,scale15,scale16,scale17,scale18,scale19,scale20,scale21,scale22,scale23,scale24,scale25,scale26,scale27,scale28,scale29,scale30,scale31,scale32,scale33,scale34,scale35,scale36,scale37,scale38,scale39,scale40,scale41,scale42,scale43,scale44,scale45,scale46,scale47,scale48,scale49,scale50,scale51,scale52,scale53,scale54,scale55,scale56,scale57,scale58,scale59,scale60,scale61,scale62,scale63,scale64,scale65,scale66,scale67 };
const int *Quantizer::hints[] = { hints0,hints1,hints2,hints3,hints4,hints5,hints6,hints7,hints8,hints9,hints10,hints11,hints12,hints13,hints14,hints15,hints16,hints17,hints18,hints19,hints20,hints21,hints22,hints23,hints24,hints25,hints26,hints27,hints28,hints29,hints30,hints31,hints32,hints33,hints34,hints35,hints36,hints37,hints38,hints39,hints40,hints41,hints42,hints43,hints44,hints45,hints46,hints47,hints48,hints49,hints50,hints51,hints52,hints53,hints54,hints55,hints56,hints57,hints58,hints59,hints60,hints61,hints62,hints63,hints64,hints65,hints66,hints67 };


const int Quantizer::bankandscale[6][12] = {
  {   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11 }, //  1  Top Twelve
  {   1,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22 }, //  2  Diatonic
  {   3,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33 }, //  3  Harmonic minor
  {  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45 }, //  4  Melodic minor (ascending/jazz)
  {   4,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56 }, //  5  Pentatonic
  {   6,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67 }  //  6  Hexatonic blues
};

// for protected header
const static int scaleCount = 68;
static const int *hints[68];
static const float *scales[68];
static const int notecount[68];

static const float PROGMEM scale0[61];
static const int PROGMEM hints0[61];
static const float PROGMEM scale1[36];
static const int PROGMEM hints1[36];
static const float PROGMEM scale2[36];
static const int PROGMEM hints2[36];
static const float PROGMEM scale3[36];
static const int PROGMEM hints3[36];
static const float PROGMEM scale4[26];
static const int PROGMEM hints4[26];
static const float PROGMEM scale5[26];
static const int PROGMEM hints5[26];
static const float PROGMEM scale6[31];
static const int PROGMEM hints6[31];
static const float PROGMEM scale7[31];
static const int PROGMEM hints7[31];
static const float PROGMEM scale8[16];
static const int PROGMEM hints8[16];
static const float PROGMEM scale9[16];
static const int PROGMEM hints9[16];
static const float PROGMEM scale10[21];
static const int PROGMEM hints10[21];
static const float PROGMEM scale11[21];
static const int PROGMEM hints11[21];
static const float PROGMEM scale12[36];
static const int PROGMEM hints12[36];
static const float PROGMEM scale13[37];
static const int PROGMEM hints13[37];
static const float PROGMEM scale14[36];
static const int PROGMEM hints14[36];
static const float PROGMEM scale15[37];
static const int PROGMEM hints15[37];
static const float PROGMEM scale16[36];
static const int PROGMEM hints16[36];
static const float PROGMEM scale17[37];
static const int PROGMEM hints17[37];
static const float PROGMEM scale18[36];
static const int PROGMEM hints18[36];
static const float PROGMEM scale19[36];
static const int PROGMEM hints19[36];
static const float PROGMEM scale20[37];
static const int PROGMEM hints20[37];
static const float PROGMEM scale21[36];
static const int PROGMEM hints21[36];
static const float PROGMEM scale22[37];
static const int PROGMEM hints22[37];
static const float PROGMEM scale23[36];
static const int PROGMEM hints23[36];
static const float PROGMEM scale24[37];
static const int PROGMEM hints24[37];
static const float PROGMEM scale25[37];
static const int PROGMEM hints25[37];
static const float PROGMEM scale26[36];
static const int PROGMEM hints26[36];
static const float PROGMEM scale27[36];
static const int PROGMEM hints27[36];
static const float PROGMEM scale28[37];
static const int PROGMEM hints28[37];
static const float PROGMEM scale29[36];
static const int PROGMEM hints29[36];
static const float PROGMEM scale30[37];
static const int PROGMEM hints30[37];
static const float PROGMEM scale31[36];
static const int PROGMEM hints31[36];
static const float PROGMEM scale32[36];
static const int PROGMEM hints32[36];
static const float PROGMEM scale33[37];
static const int PROGMEM hints33[37];
static const float PROGMEM scale34[36];
static const int PROGMEM hints34[36];
static const float PROGMEM scale35[36];
static const int PROGMEM hints35[36];
static const float PROGMEM scale36[37];
static const int PROGMEM hints36[37];
static const float PROGMEM scale37[36];
static const int PROGMEM hints37[36];
static const float PROGMEM scale38[37];
static const int PROGMEM hints38[37];
static const float PROGMEM scale39[36];
static const int PROGMEM hints39[36];
static const float PROGMEM scale40[37];
static const int PROGMEM hints40[37];
static const float PROGMEM scale41[36];
static const int PROGMEM hints41[36];
static const float PROGMEM scale42[37];
static const int PROGMEM hints42[37];
static const float PROGMEM scale43[36];
static const int PROGMEM hints43[36];
static const float PROGMEM scale44[36];
static const int PROGMEM hints44[36];
static const float PROGMEM scale45[37];
static const int PROGMEM hints45[37];
static const float PROGMEM scale46[27];
static const int PROGMEM hints46[27];
static const float PROGMEM scale47[27];
static const int PROGMEM hints47[27];
static const float PROGMEM scale48[26];
static const int PROGMEM hints48[26];
static const float PROGMEM scale49[27];
static const int PROGMEM hints49[27];
static const float PROGMEM scale50[26];
static const int PROGMEM hints50[26];
static const float PROGMEM scale51[27];
static const int PROGMEM hints51[27];
static const float PROGMEM scale52[27];
static const int PROGMEM hints52[27];
static const float PROGMEM scale53[26];
static const int PROGMEM hints53[26];
static const float PROGMEM scale54[27];
static const int PROGMEM hints54[27];
static const float PROGMEM scale55[26];
static const int PROGMEM hints55[26];
static const float PROGMEM scale56[27];
static const int PROGMEM hints56[27];
static const float PROGMEM scale57[32];
static const int PROGMEM hints57[32];
static const float PROGMEM scale58[31];
static const int PROGMEM hints58[31];
static const float PROGMEM scale59[32];
static const int PROGMEM hints59[32];
static const float PROGMEM scale60[32];
static const int PROGMEM hints60[32];
static const float PROGMEM scale61[31];
static const int PROGMEM hints61[31];
static const float PROGMEM scale62[31];
static const int PROGMEM hints62[31];
static const float PROGMEM scale63[31];
static const int PROGMEM hints63[31];
static const float PROGMEM scale64[32];
static const int PROGMEM hints64[32];
static const float PROGMEM scale65[31];
static const int PROGMEM hints65[31];
static const float PROGMEM scale66[32];
static const int PROGMEM hints66[32];
static const float PROGMEM scale67[32];
static const int PROGMEM hints67[32];
